{"version":3,"file":"8446.7c795e03.iframe.bundle.js","mappings":";;AAqBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClBA;;;;;;AAOA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;;AAOA;;;;AAIA;AACA;;AAEA;;;AAGA;;;;;AAKA;;AAEA;;;AAKA;;;;;;AC9JA;;AAQA;AACA;;;;;;;;AAQA;AAeA;;;AAAA;AACA;;;AAGA;AACA;;;;AAIA;;;;;;;;;AASA;;;;AAIA;AAGA;;;AAIA;AAGA;;;ACxEA;AACA;;AAEA;;AAEA;;;AAKA;;;;;;;;;;ACmBA;AACA;AACA;AACA;AAGA;AAIA;;;AAKA;AAGA;AAGA;AAGA;AAGA;AAGA;AAeA;AATA;AAGA;AAGA;AAGA;AAGA;AASA;AAHA;AAGA;AAGA;;ACxFA;AAGA;AAGA;AACA;AACA;;;;AAIA;;;;;AAKA;;;;AAIA;;AAIA;AACA;;;AAGA;;AASA;;;AAGA;;;AAGA;AACA;AACA;;AAEA;AACA;;;;;;;;AAQA;;;;;AAKA;;;AAGA;AACA;AAGA;;;;AAIA;AACA;AACA;;;;;;;;;;AAUA;AACA;;;AAGA;AACA;AAGA;AACA;AACA;;;;;AAKA;AAYA;AAUA;AACA;AACA;AACA;;;AAGA;;;;AAIA;;AAGA;AACA;AACA;AACA;;;AAGA;;AAhCA","sources":["webpack://@lokalise/louis/./src/components/Flex/styles.ts","webpack://@lokalise/louis/./src/components/IconButton/styles.ts","webpack://@lokalise/louis/./src/components/Input/styles.ts","webpack://@lokalise/louis/./src/components/InputErrorMessage/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/utils/styles/inputStyle.ts"],"sourcesContent":["import type { SpacingLevels } from '../../foundations/designTokens';\nimport type { CSSProperties } from '../../utils/styled';\nimport { css, styled } from '../../utils/styled';\nimport { modifier, spacing } from '../../utils/theme';\n\ntype ContainerProps = {\n\talignItems: CSSProperties['alignItems'];\n\tjustifyContent: CSSProperties['justifyContent'];\n\tflexWrap: CSSProperties['flexWrap'];\n\tflexDirection: CSSProperties['flexDirection'];\n\tbasis?: CSSProperties['flexBasis'];\n\tgrow?: CSSProperties['flexGrow'];\n\tshrink?: CSSProperties['flexShrink'];\n\talignSelf?: CSSProperties['alignSelf'];\n\trowGap: SpacingLevels;\n\tcolumnGap: SpacingLevels;\n\tinline: boolean;\n};\n\nexport const Container = styled.div<ContainerProps>`\n\tdisplay: flex;\n\tgap: ${({ rowGap }) => spacing(rowGap)} ${({ columnGap }) => spacing(columnGap)};\n\tmax-width: 100%;\n\talign-items: ${({ alignItems }) => alignItems};\n\tjustify-content: ${({ justifyContent }) => justifyContent};\n\tflex-wrap: ${({ flexWrap }) => flexWrap};\n\tflex-direction: ${({ flexDirection }) => flexDirection};\n\tflex-basis: ${({ basis }) => basis};\n\tflex-grow: ${({ grow }) => grow};\n\tflex-shrink: ${({ shrink }) => shrink};\n\talign-self: ${({ alignSelf }) => alignSelf};\n\t${modifier(\n\t\t'inline',\n\t\tcss`\n\t\t\tdisplay: inline-flex;\n\t\t`,\n\t)}\n`;\n","import { css, styled } from '../../utils/styled';\nimport { color, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance } from './IconButton';\n\ntype IconButtonProps = {\n\tappearance: Appearance;\n\tactive?: boolean;\n\tdisabled?: boolean;\n\tisLoading: boolean;\n};\n\nconst variantColorStyles = css`\n\t${variants('appearance', {\n\t\tprimary: css`\n\t\t\tpadding: 6px;\n\t\t\tfont-size: 20px;\n\n\t\t\t// hover\n\t\t\t&:hover:not([disabled]) {\n\t\t\t\tbackground-color: ${color('surface.primary100')};\n\t\t\t\tcolor: ${color(`primary.500`)};\n\t\t\t}\n\n\t\t\t// pressed\n\t\t\t&:active:not([disabled]),\n\t\t\t&:focus:active:not([disabled]) {\n\t\t\t\tbackground-color: ${color(`primary.200`)};\n\t\t\t\tcolor: ${color(`primary.500`)};\n\t\t\t}\n\n\t\t\t// focus\n\t\t\t&:focus:not([disabled]) {\n\t\t\t\tbackground-color: ${color(`surface.primary50`)};\n\t\t\t\tcolor: ${color(`primary.500`)};\n\t\t\t}\n\n\t\t\t// activated\n\t\t\t${modifier(\n\t\t\t\t'active',\n\t\t\t\tcss`\n\t\t\t\t\tbackground-color: ${color(`surface.primary50`)};\n\t\t\t\t\tcolor: ${color(`primary.500`)};\n\t\t\t\t`,\n\t\t\t)}\n\t\t`,\n\t\tsecondary: css`\n\t\t\tpadding: ${spacing(1)};\n\t\t\tfont-size: 16px;\n\t\t\tcolor: ${color(`content.secondary`)};\n\n\t\t\t// hover\n\t\t\t&:hover:not([disabled]) {\n\t\t\t\tbackground-color: ${color(`border.secondary`)};\n\t\t\t\tcolor: ${color(`content.primary`)};\n\t\t\t}\n\n\t\t\t// pressed\n\t\t\t&:active:not([disabled]),\n\t\t\t&:focus:active:not([disabled]) {\n\t\t\t\tbackground-color: ${color(`border.primary`)};\n\t\t\t\tcolor: ${color(`content.primary`)};\n\t\t\t}\n\n\t\t\t// focus\n\t\t\t&:focus:not([disabled]) {\n\t\t\t\tbackground-color: ${color(`surface.secondary`)};\n\t\t\t\tcolor: ${color(`content.primary`)};\n\t\t\t}\n\n\t\t\t// activated\n\t\t\t${modifier(\n\t\t\t\t'active',\n\t\t\t\tcss`\n\t\t\t\t\tbackground-color: ${color(`surface.secondary`)};\n\t\t\t\t\tcolor: ${color(`content.primary`)};\n\t\t\t\t`,\n\t\t\t)}\n\t\t`,\n\t\tverified: css`\n\t\t\tpadding: ${spacing(1)};\n\t\t\tfont-size: 16px;\n\t\t\tcolor: ${color(`content.secondary`)};\n\n\t\t\t// hover\n\t\t\t&:hover:not([disabled]) {\n\t\t\t\tbackground-color: ${color(`surface.yellow100`)};\n\t\t\t\tcolor: ${color(`content.primary`)};\n\t\t\t}\n\n\t\t\t// pressed\n\t\t\t&:active:not([disabled]),\n\t\t\t&:focus:active:not([disabled]) {\n\t\t\t\tbackground-color: ${color(`yellow.200`)};\n\t\t\t\tcolor: ${color(`content.primary`)};\n\t\t\t}\n\n\t\t\t// focus\n\t\t\t&:focus:not([disabled]) {\n\t\t\t\tbackground-color: ${color(`surface.yellow100`)};\n\t\t\t\tcolor: ${color(`content.primary`)};\n\t\t\t}\n\n\t\t\t// activated\n\t\t\t${modifier(\n\t\t\t\t'active',\n\t\t\t\tcss`\n\t\t\t\t\tbackground-color: ${color(`surface.yellow50`)};\n\t\t\t\t\tcolor: ${color(`content.primary`)};\n\t\t\t\t`,\n\t\t\t)}\n\t\t`,\n\t\treviewed: css`\n\t\t\tpadding: ${spacing(1)};\n\t\t\tfont-size: 16px;\n\t\t\tcolor: ${color(`content.secondary`)};\n\n\t\t\t// hover\n\t\t\t&:hover:not([disabled]) {\n\t\t\t\tbackground-color: ${color(`surface.green100`)};\n\t\t\t\tcolor: ${color(`content.primary`)};\n\t\t\t}\n\n\t\t\t// pressed\n\t\t\t&:active:not([disabled]),\n\t\t\t&:focus:active:not([disabled]) {\n\t\t\t\tbackground-color: ${color(`green.200`)};\n\t\t\t\tcolor: ${color(`content.primary`)};\n\t\t\t}\n\n\t\t\t// focus\n\t\t\t&:focus:not([disabled]) {\n\t\t\t\tbackground-color: ${color(`surface.green100`)};\n\t\t\t\tcolor: ${color(`content.primary`)};\n\t\t\t}\n\n\t\t\t// activated\n\t\t\t${modifier(\n\t\t\t\t'active',\n\t\t\t\tcss`\n\t\t\t\t\tbackground-color: ${color(`surface.green50`)};\n\t\t\t\t\tcolor: ${color(`content.primary`)};\n\t\t\t\t`,\n\t\t\t)}\n\t\t`,\n\t})}\n`;\n\nexport const Container = styled(Pressable)<IconButtonProps>`\n\tdisplay: inline-flex;\n\talign-items: center;\n\tbackground-color: transparent;\n\tcolor: ${color(`content.primary`)};\n\ttransition: background-color ${transitionTime()}, color ${transitionTime()};\n\tborder: 0;\n\tborder-radius: ${radius('md')};\n\ttext-decoration: none;\n\n\t${variantColorStyles}\n\n\t// disabled\n    &:disabled {\n\t\tcursor: not-allowed;\n\t\tcolor: ${color('interactive.primary.disabled')};\n\n\t\t${modifier(\n\t\t\t'isLoading',\n\t\t\tcss`\n\t\t\t\tcolor: initial;\n\t\t\t\tcursor: auto;\n\t\t\t\t${variantColorStyles}\n\t\t\t`,\n\t\t)}\n\t}\n`;\n","import type { InputHTMLAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { withInputContainerStyle, withInputFieldStyle, withInputSizeVariants } from '../../utils/styles';\nimport type { InputSizeVariants, InputStyleProps } from '../../utils/styles';\nimport { color, modifier, spacing } from '../../utils/theme';\nimport type { FlexProps } from '../Flex';\nimport { Flex } from '../Flex';\n\nexport const Container = styled.div`\n\twidth: 100%;\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\tgrid-template-columns: minmax(50px, 1fr); /* This ensures Input doesn't overflow 100% */\n`;\n\ninterface InputInterface extends InputHTMLAttributes<HTMLInputElement>, InputStyleProps {\n\tinputSize: InputSizeVariants;\n}\n\nexport const StyledInput = styled.input<InputInterface>`\n\t${withInputFieldStyle};\n\n\tborder: 0;\n\tmin-width: 50px;\n\twidth: 100%;\n\tpadding: 0;\n\tdisplay: block;\n\n\t${withInputSizeVariants};\n`;\n\nexport const InputIcon = styled.div`\n\tline-height: 1;\n\tfont-size: 0;\n`;\n\ntype InputContainerProps = {\n\thasPrefix?: boolean;\n\thasSuffix?: boolean;\n\tdisabled?: boolean;\n\terror?: boolean;\n};\n\nexport const InputContainer = styled(Flex)<FlexProps & InputContainerProps>`\n\t${withInputContainerStyle};\n\n\talign-items: center;\n\tpadding: ${spacing(0, 3)};\n\tcolor: ${color('content.secondary')};\n\n\t&:focus-within,\n\t[data-dev-state='focus'] & {\n\t\tcolor: ${color('primary.500')};\n\t}\n\n\t// All items should preserve their width\n\t> * {\n\t\tflex-shrink: 0;\n\t}\n\n\t// Except input\n\t> ${StyledInput} {\n\t\tflex-shrink: 1;\n\t}\n\n\t${modifier(\n\t\t'hasPrefix',\n\t\tcss`\n\t\t\tpadding-left: ${spacing(2)};\n\t\t`,\n\t)};\n\n\t${modifier(\n\t\t'hasSuffix',\n\t\tcss`\n\t\t\tpadding-right: ${spacing(2)};\n\t\t`,\n\t)};\n`;\n","import { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Error = styled.div`\n\tfont-family: ${fontFamily('default')};\n\t${typography('message')}\n\n\tcolor: ${color('red.600')};\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\tgrid-template-columns: min-content auto;\n\talign-items: center;\n`;\n\nexport const IconContainer = styled.div`\n\talign-self: flex-start;\n\tfont-size: 16px;\n\tdisplay: flex;\n\talign-items: center;\n`;\n","import { css, styled, type StyledProps } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type SvgIconColor = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n\tcolor?: SvgIconColor;\n\tfill?: SvgIconColor;\n\tstroke?: SvgIconColor;\n\tsize?: string;\n};\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n\tcolor: 'inherit',\n\tfill: 'currentColor',\n\tstroke: undefined,\n};\n\nconst colorHelper = (\n\tcolorType: keyof typeof colorTypesDefaults,\n\tinputColor: SvgIconColor | undefined,\n\tprops: StyledProps<unknown>,\n) =>\n\tinputColor && !reservedKeywords.includes(inputColor)\n\t\t? color(inputColor as NamedColor)(props)\n\t\t: colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n\tpointer-events: all;\n\tbox-sizing: border-box;\n\tcolor: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n\tfill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n\tstroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n\tfont-size: ${(props) => props.size};\n`;\n\nconst commonExcludedProps = ['fill', 'color', 'stroke'];\nexport const SvgRoot = styled.svg.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n\twidth: 1em;\n\theight: 1em;\n`;\n\nexport const SvgIconPath = styled.path.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconRect = styled.rect.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconG = styled.g.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconCircle = styled.circle.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconLinearGradient = styled.linearGradient.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconDefs = styled.defs.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconStop = styled.stop.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconClipPath = styled.clipPath.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n","import type { CssDeclaration } from '../styled';\nimport { css } from '../styled';\nimport { color, fontFamily, modifier, radius, spacing, typography, variants } from '../theme';\n\nexport const withInputErrorStyle = css`\n\tborder-color: ${color('red.600')};\n`;\n\nexport const withInputErrorModifier = modifier('error', withInputErrorStyle);\n\nexport const withInputDisabledStyle = css`\n\tcolor: ${color('content.disabled')};\n\tbackground-color: ${color('surface.secondary')};\n\tborder-color: ${color('border.primary')};\n\n\t&:hover,\n\t[data-dev-state='hover'] & {\n\t\tborder-color: ${color('border.primary')};\n\t}\n\n\t&:focus,\n\t[data-dev-state='focus'] & {\n\t\tborder-color: ${color('border.primary')};\n\t}\n\n\t&::placeholder {\n\t\tcolor: ${color('content.disabled')};\n\t}\n`;\n\nexport const withInputDisabledModifier = css`\n\t${modifier('disabled', withInputDisabledStyle)}\n\n\t&:disabled {\n\t\t${withInputDisabledStyle}\n\t}\n`;\n\nexport interface InputStyleProps {\n\terror?: boolean;\n\tdisabled?: boolean;\n}\n\nexport const withInputContainerStyle = css<InputStyleProps>`\n\tbox-sizing: border-box;\n\n\t${typography('description')};\n\n\twidth: 100%;\n\tcolor: ${color('content.primary')};\n\tborder: 1px solid ${color('border.primary')};\n\tborder-radius: ${radius('md')};\n\ttransition: border-color ease-in-out 0.15s;\n\tpadding: ${spacing(2, 3)};\n\tbackground-color: ${color('background.input')};\n\n\t@media (prefers-reduced-motion: reduce) {\n\t\ttransition: none;\n\t}\n\n\t&:hover,\n\t[data-dev-state='hover'] & {\n\t\tborder-color: ${color('primary.300')};\n\t}\n\n\t&:focus-within,\n\t[data-dev-state='focus'] & {\n\t\tborder-color: ${color('primary.500')};\n\t}\n\n\t${withInputErrorModifier}\n\t${withInputDisabledModifier}\n`;\n\nexport const withInputFieldStyle = css<InputStyleProps>`\n\tbox-sizing: content-box;\n\t-webkit-font-smoothing: subpixel-antialiased;\n\n\tfont-family: ${fontFamily('default')};\n\t${typography('description')};\n\tcolor: ${color('content.primary')};\n\tbackground: none;\n\n\t&&&:focus,\n\t&&&:focus-visible,\n\t[data-dev-state='focus'] &&& {\n\t\toutline: none !important;\n\t}\n\n\t&::placeholder {\n\t\t${typography('description')};\n\t\tcolor: ${color('content.secondary')};\n\t}\n\n\t${withInputErrorModifier}\n\t${withInputDisabledModifier}\n`;\n\nexport const withInputStyle = css<InputStyleProps>`\n\t${withInputContainerStyle};\n\t${withInputFieldStyle};\n\n\t// Unfortunately, we need order of container -> input, but we need certain props from container\n\t// so we override those here. Currently I don't see way to combine those styles cleaner.\n\tbox-sizing: border-box;\n\tbackground: ${color('background.input')};\n`;\n\nexport type InputSizeVariants = 'small' | 'default';\n\n/**\n * This helper allows us to define custom styles for inputs in a way that allows size names, defaults and ensuring\n * that all required sizes are defined.\n */\nexport const buildInputSizeStyles = <T extends object>(sizeStyles: Record<InputSizeVariants, CssDeclaration<T>>) =>\n\tvariants('inputSize', sizeStyles, 'default');\n\nexport const inputHeight = 35;\nexport const smallInputHeight = 30;\n\nconst inputTopBottomBorderWidth = 2;\n\nconst inputElementHeight = inputHeight - inputTopBottomBorderWidth;\nconst smallInputElementHeight = smallInputHeight - inputTopBottomBorderWidth;\n\nexport const withInputSizeVariants = buildInputSizeStyles({\n\tsmall: css`\n\t\theight: ${smallInputElementHeight}px;\n\t\tmin-height: ${smallInputElementHeight}px;\n\t\tline-height: ${smallInputElementHeight}px;\n\t\t${typography('caption1')};\n\n\t\t&::placeholder {\n\t\t\t${typography('caption1')}\n\t\t}\n\n\t\t&::-moz-placeholder {\n\t\t\tline-height: ${smallInputElementHeight}px;\n\t\t}\n\t`,\n\tdefault: css`\n\t\theight: ${inputElementHeight}px;\n\t\tmin-height: ${inputElementHeight}px;\n\t\tline-height: ${inputElementHeight}px;\n\n\t\t&::-moz-placeholder {\n\t\t\tline-height: ${inputElementHeight}px;\n\t\t}\n\t`,\n});\n"],"names":[],"sourceRoot":""}