{"version":3,"file":"components-StepWizard-StepWizard-stories-mdx.1c395967.iframe.bundle.js","mappings":";;;AAOA;AACA;AAGA;;;;;;AAQA;;;;;;AAMA;;AAIA;;;;;AAKA;AACA;AACA;;;AAGA;AACA;AAEA;;;;;AAKA;AACA;AAEA;;;;AAIA;AACA;AACA;;AAIA;;;;AAMA;;;AAGA;;;;;;;AC5DA;;AAEA;;AAEA;ACqBA;AC7BA;ACoCA;;ACVA;AACA;AAIA;AAGA;AACA;AACA;AAEA;AAUA;AACA;AACA;;;;AAIA;AACA;AACA;;;;;;AAMA;AACA;;;;AAIA;AAGA;AACA;;AAGA;AAIA;AAEA;AACA;;;;AAIA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;AAIA;AACA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;AAKA;;;;;;;AAOA;;;AAGA;;AAEA;;AAEA;;AAGA;;;AAIA;;AAEA;AACA;;AAGA;;AAEA;AACA;;AAGA;;AAEA;;;;;AAMA;;;;;AAKA;AACA;AACA;;AAEA;;AAIA;;;;;;;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;;AAQA;;;;;;AAMA;;AAIA;;AAGA;;AAGA;;;AAMA;;;;;;;;;;;;;;;AC3NA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;;;;AAWA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;;AAGA;AAuBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AClFA;;;;;;;AASA;;;;;;AAMA;AAGA;AACA;;;;;;;AASA;AACA;;AAIA;;;AAGA;;;AAGA;;;;;;;;;;AAeA;;;;;;;;;AASA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;AAMA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAIA;;;;;AAKA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;;;AC7KA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;;AAEA;AACA","sources":["webpack://@lokalise/louis/./src/components/StepWizard/components/HorizontalPageCounter/styles.ts","webpack://@lokalise/louis/./src/components/StepWizard/styles.ts","webpack://@lokalise/louis/./src/components/StepWizard/StepWizard.tsx","webpack://@lokalise/louis/./src/components/StepWizard/components/StepWizardPage/styles.ts","webpack://@lokalise/louis/./src/components/StepWizard/components/StepWizardPage/StepWizardPage.tsx","webpack://@lokalise/louis/./src/components/Button/styles.ts","webpack://@lokalise/louis/./src/components/Popover/styles.ts","webpack://@lokalise/louis/./src/components/Toast/styles.ts","webpack://@lokalise/louis/./src/components/Tooltip/styles.ts"],"sourcesContent":["import { styled } from '../../../../utils/styled';\nimport { color, fontFamily, spacing } from '../../../../utils/theme';\nimport { Button } from '../../../Button';\n\nexport const PageCounterContainer = styled.div`\n\twidth: 100%;\n\tposition: relative;\n\tmargin: ${spacing(4)} 0;\n\tfont-family: ${fontFamily('default')};\n`;\n\nexport const PagesContainer = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: flex-start;\n\tjustify-content: space-evenly;\n`;\n\nexport const PageLabelContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 100%;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: ${spacing(2)};\n\tz-index: 1;\n`;\n\nexport const PageNumber = styled(Button)<{ selected: boolean }>`\n\tborder-radius: 50%;\n\twidth: 30px;\n\theight: 30px;\n\n\tborder-color: ${color('interactive.primary.idle')};\n\tcolor: ${(props) => (!props.selected ? color('interactive.primary.idle') : color('content.white'))};\n\tbackground-color: ${(props) => (!props.selected ? color('background.primary') : color('interactive.primary.idle'))};\n\n\t&:hover:not([disabled]):not([aria-expanded='true']) {\n\t\tborder-color: ${color('interactive.primary.hover')};\n\t\tbackground-color: ${(props) =>\n\t\t\t!props.selected ? color('surface.primary50') : color('interactive.primary.hover')};\n\t\tcolor: ${(props) => (!props.selected ? color('interactive.primary.idle') : color('content.white'))};\n\t}\n\n\t&:active:not([disabled]):not([aria-expanded='true']),\n\t&:focus:active:not([disabled]):not([aria-expanded='true']) {\n\t\tborder-color: ${color('interactive.primary.pressed')};\n\t\tbackground-color: ${(props) =>\n\t\t\t!props.selected ? color('surface.primary100') : color('interactive.primary.pressed')};\n\t\tcolor: ${(props) => (!props.selected ? color('interactive.primary.pressed') : color('content.white'))};\n\t}\n\n\t&:disabled {\n\t\tbackground-color: ${color('surface.secondary')};\n\t\tcolor: ${color('content.secondary')};\n\t\tborder-color: ${color('border.secondary')};\n\t}\n`;\n\nexport const PageLabel = styled.div`\n\ttext-align: center;\n\twidth: 100%;\n\tfont-size: 14px;\n`;\n\nexport const BackgroundLine = styled.div`\n\twidth: 100%;\n\theight: 1px;\n\tbackground: ${color('border.primary')};\n\tposition: absolute;\n\tmargin-top: 14px;\n`;\n","import { styled } from '../../utils/styled';\nimport { color, spacing } from '../../utils/theme';\n\nexport const ActionsContainer = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: space-between;\n`;\n\nexport const HorizontalDivider = styled.div`\n\twidth: 100%;\n\tbackground: ${color('border.secondary')};\n\theight: 1px;\n\tmargin-top: ${spacing(1)};\n`;\n","import type { ReactElement } from 'react';\nimport React, { isValidElement, useEffect, useMemo, useState } from 'react';\n\nimport { Button } from '../Button';\nimport { Flex } from '../Flex';\nimport { Tooltip } from '../Tooltip';\nimport { HorizontalPageCounter } from './components/HorizontalPageCounter';\nimport type { StepWizardPageData, StepWizardPageProps } from './components/StepWizardPage';\nimport { StepWizardEvents } from './hooks/useStepWizard';\nimport { ActionsContainer, HorizontalDivider } from './styles';\n\nexport type StepWizardProps = {\n\t/**\n\t * Tooltip displayed on the \"Next\" or \"Submit\" button.\n\t * */\n\tconfirmTooltip?: string;\n\t/**\n\t * Text displayed on the final submit button on the last page.\n\t * */\n\tsubmitText: string;\n\t/**\n\t * The callback executed when the user presses the submit button.\n\t * */\n\tonSubmit: () => void;\n\t/**\n\t * Sets the css class attribute.\n\t * */\n\tclassName?: string;\n\t/**\n\t * Accept StepWizardPage as children.\n\t * */\n\tchildren: (ReactElement<StepWizardPageProps> | boolean)[];\n};\n\nexport const StepWizard = ({ confirmTooltip, submitText, onSubmit, className, children }: StepWizardProps) => {\n\tconst [currentPage, setCurrentPage] = useState(0);\n\n\tconst isPageValid = (\n\t\tprops: StepWizardPageProps,\n\t\tindex: number,\n\t\tallPages: ReactElement<StepWizardPageProps>[],\n\t): boolean => {\n\t\tconst allPreviousPagesValid = allPages\n\t\t\t.filter((_, pageIndex) => pageIndex < index)\n\t\t\t.every((page) => page.props.valid || page.props.valid === undefined);\n\n\t\treturn (props.valid || props.valid === undefined) && allPreviousPagesValid;\n\t};\n\n\tconst pages: StepWizardPageData[] = useMemo(\n\t\t() =>\n\t\t\tchildren\n\t\t\t\t.filter((page) => isValidElement(page) && page.props)\n\t\t\t\t.map((page) => page as ReactElement<StepWizardPageProps>)\n\t\t\t\t.map((page, index, allPages) => ({\n\t\t\t\t\t...page.props,\n\t\t\t\t\tvalid: isPageValid(page.props, index, allPages),\n\t\t\t\t\tloading: page.props.loading ?? false,\n\t\t\t\t\telement: page,\n\t\t\t\t})) ?? [],\n\t\t[children],\n\t);\n\n\tconst isLastPage = currentPage === pages.length - 1;\n\n\tconst onNavigateToPage = (index: number) => {\n\t\tpages[currentPage].onPageSave?.(index);\n\t\tsetCurrentPage(index);\n\t};\n\n\tconst onNext = () => {\n\t\tif (isLastPage) {\n\t\t\tonSubmit();\n\t\t} else {\n\t\t\tonNavigateToPage(currentPage + 1);\n\t\t}\n\t};\n\n\tconst onPrevious = () => {\n\t\tonNavigateToPage(currentPage - 1);\n\t};\n\n\tuseEffect(() => {\n\t\tdocument.addEventListener(StepWizardEvents.ConfirmAndGoToNext, onNext);\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(StepWizardEvents.ConfirmAndGoToNext, onNext);\n\t\t};\n\t});\n\n\treturn (\n\t\t<Flex gap={4} align=\"stretch\" direction=\"column\" className={className}>\n\t\t\t<HorizontalPageCounter currentPageIndex={currentPage} pages={pages} onNavigateToPage={onNavigateToPage} />\n\t\t\t{pages.map((page, index) => index === currentPage && page.element)}\n\t\t\t<HorizontalDivider />\n\t\t\t<ActionsContainer>\n\t\t\t\t{currentPage > 0 ? (\n\t\t\t\t\t<Button type=\"button\" appearance=\"primary\" variant=\"outline\" onClick={onPrevious}>\n\t\t\t\t\t\tPrevious: {pages[currentPage - 1].label}\n\t\t\t\t\t</Button>\n\t\t\t\t) : (\n\t\t\t\t\t<span />\n\t\t\t\t)}\n\t\t\t\t<Tooltip show={!!confirmTooltip && pages[currentPage].valid} tooltip={confirmTooltip ?? ''}>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tappearance=\"primary\"\n\t\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\t\tonClick={onNext}\n\t\t\t\t\t\tloading={pages[currentPage].loading}\n\t\t\t\t\t\tdisabled={!pages[currentPage].valid}\n\t\t\t\t\t>\n\t\t\t\t\t\t{isLastPage ? `${submitText}` : `Next: ${pages[currentPage + 1].label}`}\n\t\t\t\t\t</Button>\n\t\t\t\t</Tooltip>\n\t\t\t</ActionsContainer>\n\t\t</Flex>\n\t);\n};\n\nStepWizard.displayName = 'StepWizard';\n","import { styled } from '../../../../utils/styled';\nimport { fontFamily } from '../../../../utils/theme';\nimport { Flex } from '../../../Flex';\n\nexport const Container = styled(Flex)`\n\tfont-family: ${fontFamily('default')};\n`;\n","import type { ReactElement, ReactNode } from 'react';\nimport React from 'react';\n\nimport { Container } from './styles';\n\n/* eslint-disable react/no-unused-prop-types */\nexport type StepWizardPageProps = {\n\t/**\n\t * Render Step's content.\n\t * */\n\tchildren: ReactNode | ReactNode[];\n\t/**\n\t * The name of the page displayed in the navigation bar.\n\t * */\n\tlabel: string;\n\t/**\n\t * Allows navigating to the next page.\n\t * */\n\tvalid?: boolean;\n\t/**\n\t * Shows a loading spinner on the \"Next\" or \"Submit\" button.\n\t * */\n\tloading?: boolean;\n\t/**\n\t * A callback executed before the user leaves this page.\n\t * */\n\tonPageSave?: (movingToPage: number) => void;\n\t/**\n\t * Sets the css class attribute.\n\t * */\n\tclassName?: string;\n};\n\nexport type StepWizardPageData = {\n\tlabel: string;\n\tvalid: boolean;\n\tloading: boolean;\n\tonPageSave?: (movingToPage: number) => void;\n\telement: ReactElement<StepWizardPageProps>;\n};\n\nexport const StepWizardPage = ({ children, className }: StepWizardPageProps) => (\n\t<Container gap={4} align=\"stretch\" direction=\"column\" className={className}>\n\t\t{children}\n\t</Container>\n);\n\nStepWizardPage.displayName = 'StepWizardPage';\n","import { LoadingSignIcon } from '../../foundations/icons';\nimport { css, styled } from '../../utils/styled';\nimport { inputHeight, smallInputHeight } from '../../utils/styles';\nimport { color, fontFamily, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance, ButtonVariant, Size } from './Button';\n\ntype ButtonProps = {\n\tsize: Size;\n\tvariant: ButtonVariant;\n\tappearance: Appearance;\n\tactive: boolean;\n\tdisabled: boolean;\n\tisLoading: boolean;\n};\n\nconst appearanceToColorCode = (appearance: Appearance) => {\n\tconst colorCodes = {\n\t\tdefault: 'primary',\n\t\tprimary: 'primary',\n\t\tdanger: 'red',\n\t\twarning: 'yellow',\n\t} as const;\n\n\treturn colorCodes[appearance];\n};\n\nconst getOutlineStyles = (colorType: 'idle' | 'hover' | 'pressed', appearance: Appearance, transparent = false) => {\n\tif (appearance === 'default') {\n\t\treturn css`\n\t\t\tbackground-color: transparent;\n\t\t\tcolor: ${color('content.primary')};\n\t\t\tborder-color: ${color('content.primary')};\n\t\t`;\n\t}\n\n\tconst appearanceColorCode = appearanceToColorCode(appearance);\n\n\treturn css`\n\t\tbackground-color: ${transparent ? 'transparent' : color(`surface.${appearanceColorCode}50`)};\n\t\tborder-color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n\t\tcolor: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n\t`;\n};\n\nconst getColorStyles = (appearance: Appearance, colorCode: 'white' | 'black') => {\n\tif (appearance === 'default') {\n\t\treturn undefined;\n\t}\n\n\tconst appearanceColorCode = appearanceToColorCode(appearance);\n\n\treturn css`\n\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n\t\tborder-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n\t\tcolor: ${color(`content.${colorCode}`)};\n\n\t\t// hover\n\t\t&:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n\t\t\tcolor: ${color(`content.${colorCode}`)};\n\t\t}\n\n\t\t// pressed\n\t\t&:active:not([disabled]):not([aria-expanded='true']),\n\t\t&:focus:active:not([disabled]):not([aria-expanded='true']) {\n\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t}\n\n\t\t// activated\n\t\t${modifier(\n\t\t\t'active',\n\t\t\tcss`\n\t\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\t`,\n\t\t)}\n\t`;\n};\n\nconst variantColorStyles = css`\n\t${variants('appearance', {\n\t\tdefault: css<ButtonProps>`\n\t\t\tbackground-color: ${color(`content.white`)};\n\t\t\tcolor: ${color('primary.400')};\n\t\t\tborder-color: transparent;\n\n\t\t\t&:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\tcolor: ${color('primary.500')};\n\t\t\t}\n\t\t`,\n\t\tprimary: css<ButtonProps>`\n\t\t\t${getColorStyles('primary', 'white')}\n\t\t`,\n\t\twarning: css<ButtonProps>`\n\t\t\t${getColorStyles('warning', 'black')}\n\t\t`,\n\t\tdanger: css<ButtonProps>`\n\t\t\t${getColorStyles('danger', 'white')}\n\t\t`,\n\t})}\n\n\t${variants('variant', {\n\t\tsolid: css``,\n\t\toutline: css<ButtonProps>`\n\t\t\tborder-width: 1px;\n\t\t\t${({ appearance }) => css`\n\t\t\t\t${getOutlineStyles('idle', appearance, true)}\n\n\t\t\t\t// hover\n                &:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\t\t${getOutlineStyles('hover', appearance, true)}\n\t\t\t\t}\n\n\t\t\t\t// pressed\n\t\t\t\t&:active:not([disabled]):not([aria-expanded='true']),\n\t\t\t\t&:focus:active:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\t\t${getOutlineStyles('pressed', appearance)}\n\t\t\t\t}\n\n\t\t\t\t// activated\n\t\t\t\t${modifier('active', getOutlineStyles('pressed', appearance))}\n\t\t\t`}\n\t\t`,\n\t})}\n`;\n\nexport const Container = styled(Pressable)<ButtonProps>`\n\tdisplay: inline-flex;\n\talign-items: center;\n\tbackground-color: transparent;\n\tborder: 1px solid transparent;\n\ttext-decoration: none;\n\tvertical-align: middle;\n\tborder-radius: ${radius('md')};\n\tcursor: pointer;\n\tposition: relative;\n\ttransition: all ${transitionTime()};\n\tbox-sizing: border-box;\n\tfont-family: ${fontFamily('default')};\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\tfont-size: 11px;\n\t\t\tpadding: ${spacing(0, 2)};\n\t\t\theight: 20px;\n\t\t\tline-height: 12px;\n\t\t`,\n\t\tsm: css`\n\t\t\tfont-size: 12px;\n\t\t\tpadding: ${spacing(0, 3)};\n\t\t\theight: ${smallInputHeight}px;\n\t\t\tline-height: 12px;\n\t\t`,\n\t\tmd: css`\n\t\t\tfont-size: 14px;\n\t\t\tpadding: ${spacing(0, 3)};\n\t\t\theight: ${inputHeight}px;\n\t\t\tline-height: 14px;\n\t\t`,\n\t\tlg: css`\n\t\t\tfont-size: 18px;\n\t\t\tpadding: ${spacing(0, 4)};\n\t\t\theight: 45px;\n\t\t\tline-height: 18px;\n\t\t`,\n\t})}\n\n\t${variantColorStyles}\n\n    // disabled\n    &:disabled {\n\t\tcursor: not-allowed;\n\t\tbackground-color: ${color('surface.secondary')};\n\t\tcolor: ${color('content.disabled')};\n\t\tborder-color: ${color('content.disabled')};\n\n\t\t${modifier('isLoading', variantColorStyles)}\n\t}\n`;\n\nexport const Content = styled.span<{ isHidden: boolean; size: Size }>`\n\tdisplay: flex;\n\tflex-flow: row nowrap;\n\talign-items: center;\n\tjustify-content: center;\n\twidth: 100%;\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\tgap: ${spacing(1)};\n\t\t`,\n\t\tsm: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t\tmd: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t\tlg: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t})}\n\n\t${modifier(\n\t\t'isHidden',\n\t\tcss`\n\t\t\topacity: 0;\n\t\t`,\n\t)}\n`;\n\nexport const Text = styled.span<{ size: Size }>`\n\tposition: relative;\n\talign-items: center;\n\tdisplay: inline-flex;\n\twhite-space: nowrap;\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\ttop: 0;\n\t\t`,\n\t\tsm: css`\n\t\t\ttop: -1px; // Make text visually centered\n\t\t`,\n\t\tmd: css`\n\t\t\ttop: 0;\n\t\t`,\n\t\tlg: css`\n\t\t\ttop: -1px; // Make text visually centered\n\t\t`,\n\t})}\n`;\n\nexport const StyledLoadingSign = styled(LoadingSignIcon)`\n\tfont-size: 1.3em;\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n`;\n","import type { Placement } from '@popperjs/core/lib/enums';\nimport type { HTMLAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography, variants, zIndex } from '../../utils/theme';\n\nconst bottom = css`\n\ttop: -5px;\n\n\t&::before {\n\t\tborder-left-width: 1px;\n\t\tborder-left-style: solid;\n\t\tborder-top-width: 1px;\n\t\tborder-top-style: solid;\n\t}\n`;\nconst top = css`\n\tbottom: -5px;\n\n\t&::before {\n\t\tborder-right-width: 1px;\n\t\tborder-right-style: solid;\n\t\tborder-bottom-width: 1px;\n\t\tborder-bottom-style: solid;\n\t}\n`;\nconst left = css`\n\tright: -5px;\n\n\t&::before {\n\t\tborder-right-width: 1px;\n\t\tborder-right-style: solid;\n\t\tborder-top-width: 1px;\n\t\tborder-top-style: solid;\n\t}\n`;\nconst right = css`\n\tleft: -5px;\n\n\t&::before {\n\t\tborder-left-width: 1px;\n\t\tborder-left-style: solid;\n\t\tborder-bottom-width: 1px;\n\t\tborder-bottom-style: solid;\n\t}\n`;\n\nexport const Arrow = styled.div<{ placement?: Placement }>`\n\tposition: absolute;\n\twidth: 8px;\n\theight: 8px;\n\tz-index: ${zIndex('hide')};\n\n\t&::before {\n\t\tposition: absolute;\n\t\twidth: 8px;\n\t\theight: 8px;\n\t\tz-index: ${zIndex('hide')};\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\ttransform: rotate(45deg);\n\t\tbackground-color: ${color('background.primary')};\n\t\tborder-color: ${color('border.primary')};\n\t}\n\n\t${variants(\n\t\t'placement',\n\t\t{\n\t\t\ttop,\n\t\t\tbottom,\n\t\t\tleft,\n\t\t\tright,\n\t\t\t'right-end': right,\n\t\t\t'right-start': right,\n\t\t\t'left-start': left,\n\t\t\t'auto-end': css``,\n\t\t\t'auto-start': css``,\n\t\t\tauto: css``,\n\t\t\t'bottom-end': bottom,\n\t\t\t'bottom-start': bottom,\n\t\t\t'left-end': left,\n\t\t\t'top-end': top,\n\t\t\t'top-start': top,\n\t\t},\n\t\t'auto',\n\t)}\n`;\n\nexport const Content = styled.div<HTMLAttributes<HTMLElement>>`\n\tpadding: 0;\n\tborder-radius: ${radius('md')};\n\tbackground-color: ${color('background.primary')};\n\tborder: 1px solid ${color('border.primary')};\n\tbox-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n\tz-index: ${zIndex('popover')};\n\tcolor: ${color('content.primary')};\n\tfont-family: ${fontFamily('default')};\n\t${typography('description')};\n`;\n","import { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, modifier, radius, spacing, transitionTime, typography, zIndex } from '../../utils/theme';\nimport { IconButton } from '../IconButton';\nimport type { IconButtonProps } from '../IconButton';\nimport type { PressableProps } from '../Pressable';\nimport { Pressable } from '../Pressable';\n\nexport const CloseIconButton = styled(IconButton)<IconButtonProps>`\n\topacity: 0;\n\ttransition: opacity 0.2s;\n`;\n\nexport const TypeIcon = styled.div`\n\tflex-basis: 16px;\n\tflex-shrink: 0;\n\tflex-grow: 0;\n\theight: 20px;\n\tdisplay: flex;\n\talign-items: center;\n`;\n\nexport const Content = styled.div`\n\twidth: 100%;\n\tflex-shrink: 1;\n\tflex-grow: 1;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgap: ${spacing(1)};\n`;\n\nexport const Title = styled.span`\n\t${typography('captionMedium')};\n\tdisplay: -webkit-box;\n\ttext-overflow: ellipsis;\n\t-webkit-line-clamp: 2;\n\t-webkit-box-orient: vertical;\n\tword-break: break-word;\n\toverflow: hidden;\n`;\n\nexport const Description = styled.span`\n\t${typography('caption2')};\n\tdisplay: block;\n`;\n\nexport const ToastAnchor = styled(Pressable)<PressableProps>`\n\ttext-decoration: underline;\n\tcursor: pointer;\n\ttransition: opacity ${transitionTime()};\n\tfont-weight: inherit;\n\n\t${modifier(\n\t\t({ href }: PressableProps) => !href,\n\t\tcss`\n\t\t\tbackground-color: transparent;\n\t\t\tborder: none;\n\t\t\tfont-family: inherit;\n\t\t\tpadding: 0;\n\t\t`,\n\t)}\n\n\t&:hover {\n\t\topacity: 0.7;\n\t}\n`;\n\nexport const StyledToastContainer = styled(ToastContainer)`\n\ttransform: translate3d(0, 0, 9999px);\n\tposition: fixed;\n\tfont-family: inherit;\n\twidth: 332px;\n\tmin-height: 44px;\n\tbox-sizing: border-box;\n\tpadding: 0;\n\n\t--toastify-color-light: ${color('content.primary')};\n\t--toastify-color-dark: var(--toastify-color-light);\n\t--toastify-color-info: ${color('surface.primary50')};\n\t--toastify-color-success: ${color('surface.green50')};\n\t--toastify-color-warning: ${color('surface.yellow50')};\n\t--toastify-color-error: ${color('surface.red50')};\n\t//--toastify-color-transparent: rgba(255, 255, 255, 0.7);\n\n\t--toastify-icon-color-info: ${color('primary.600')};\n\t--toastify-icon-color-success: ${color('green.600')};\n\t--toastify-icon-color-warning: ${color('yellow.800')};\n\t--toastify-icon-color-error: ${color('red.600')};\n\n\t//--toastify-toast-width: 320px;\n\t//--toastify-toast-background: #fff;\n\t//--toastify-toast-min-height: 64px;\n\t//--toastify-toast-max-height: 800px;\n\t--toastify-font-family: ${fontFamily('default')};\n\t--toastify-z-index: ${zIndex('toast')};\n\n\t--toastify-text-color-light: ${color('content.primary')};\n\t--toastify-text-color-dark: var(--toastify-text-color-light);\n\n\t--toastify-text-color-info: var(--toastify-text-color-light);\n\t--toastify-text-color-success: var(--toastify-text-color-light);\n\t--toastify-text-color-warning: var(--toastify-text-color-light);\n\t--toastify-text-color-error: var(--toastify-text-color-light);\n\n\t//--toastify-spinner-color: #616161;\n\t//--toastify-spinner-color-empty-area: #e0e0e0;\n\n\t// Used when no type is provided\n\t// toast(\"**hello**\")\n\t//--toastify-color-progress-light: linear-gradient(to right, #4cd964, #5ac8fa, #007aff, #34aadc, #5856d6, #ff2d55);\n\t// Used when no type is provided\n\t--toastify-color-progress-dark: var(--toastify-color-progress-light);\n\t--toastify-color-progress-info: var(--toastify-icon-color-info);\n\t--toastify-color-progress-success: var(--toastify-icon-color-success);\n\t--toastify-color-progress-warning: var(--toastify-icon-color-warning);\n\t--toastify-color-progress-error: var(--toastify-icon-color-error);\n\n\t.Toastify__toast {\n\t\tbox-sizing: border-box;\n\t\tpadding: ${spacing(4, 2)};\n\t\twidth: 100%;\n\t\tdisplay: flex;\n\t\talign-items: flex-start;\n\t\tcolor: ${color('content.primary')};\n\t\tbox-shadow: none;\n\t\tcursor: default;\n\t\tmin-height: 44px;\n\t\toverflow: hidden;\n\t\tborder-radius: ${radius('md')};\n\t\tmargin-bottom: ${spacing(2)};\n\n\t\t&:hover ${CloseIconButton} {\n\t\t\topacity: 1;\n\t\t}\n\t}\n\n\t.Toastify__toast-icon {\n\t\tmargin: 0;\n\t}\n\n\t.Toastify__toast.Toastify__toast--success {\n\t\tbackground-color: var(--toastify-color-success);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-success);\n\t\t}\n\t}\n\n\t.Toastify__toast.Toastify__toast--error {\n\t\tbackground-color: var(--toastify-color-error);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-error);\n\t\t}\n\t}\n\n\t.Toastify__toast.Toastify__toast--warning {\n\t\tbackground-color: var(--toastify-color-warning);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-warning);\n\t\t}\n\t}\n\n\t.Toastify__toast.Toastify__toast--info {\n\t\tbackground-color: var(--toastify-color-info);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-info);\n\t\t}\n\t}\n\n\t.Toastify__toast-body {\n\t\twidth: 100%;\n\t\tdisplay: flex;\n\t\talign-items: flex-start;\n\t\tgap: ${spacing(2)};\n\t\tpadding: 0;\n\t}\n`;\n","import { styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography, zIndex } from '../../utils/theme';\nimport { PopoverArrow as BaseArrow, PopoverContent as BaseContent } from '../Popover';\n\nexport const Content = styled(BaseContent)`\n\tfont: ${fontFamily('default')};\n\t${typography('caption2')};\n\tbackground-color: ${color('content.black')};\n\tcolor: ${color('content.white')};\n\tborder-radius: ${radius('md')};\n\tpadding: 3px 8px 4px;\n\tborder-color: ${color('content.black')};\n\tz-index: ${zIndex('tooltip')};\n`;\n\nexport const Arrow = styled(BaseArrow)`\n\t&:before {\n\t\tbackground-color: ${color('content.black')};\n\t\tborder-color: ${color('content.black')};\n\t}\n`;\n"],"names":[],"sourceRoot":""}