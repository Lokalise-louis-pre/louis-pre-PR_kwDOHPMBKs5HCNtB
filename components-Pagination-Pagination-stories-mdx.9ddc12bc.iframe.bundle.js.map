{"version":3,"file":"components-Pagination-Pagination-stories-mdx.9ddc12bc.iframe.bundle.js","mappings":";;;;;AAYA;;;;AAIA;AAGA;;AAIA;;AAIA;AACA;AACA;AACA;AAGA;;;AAGA;;;AAQA;AACA;AACA;;AAEA;;;ACjBA;AACA;AAIA;AAGA;AACA;AACA;AAEA;AAUA;AACA;AACA;;;;AAIA;AACA;AACA;;;;;;AAMA;AACA;;;;AAIA;AAGA;AACA;;AAGA;AAIA;AAEA;AACA;;;;AAIA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;AAIA;AACA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;AAKA;;;;;;;AAOA;;;AAGA;;AAEA;;AAEA;;AAGA;;;AAIA;;AAEA;AACA;;AAGA;;AAEA;AACA;;AAGA;;AAEA;;;;;AAMA;;;;;AAKA;AACA;AACA;;AAEA;;AAIA;;;;;;;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;;AAQA;;;;;;AAMA;;AAIA;;AAGA;;AAGA;;;AAMA;;;;;;;;;;;ACnOA;AACA;;;;AAIA;;;;AAIA;;;AAGA;;;AAGA","sources":["webpack://@lokalise/louis/./src/components/Pagination/styles.ts","webpack://@lokalise/louis/./src/components/Button/styles.ts","webpack://@lokalise/louis/./src/utils/styles/link.ts"],"sourcesContent":["import { css, styled } from '../../utils/styled';\nimport { withLinkStyle } from '../../utils/styles';\nimport { color, fontFamily, modifier, spacing, typography } from '../../utils/theme';\nimport { Input } from '../Input';\n\nexport const Container = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n`;\n\nexport const Content = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n\tfont-family: ${fontFamily('default')};\n`;\n\nexport const InputWrapper = styled.div`\n\twidth: 55px;\n`;\n\nexport const StyledInput = styled(Input)`\n\tmin-width: 40px;\n`;\n\nexport const Text = styled.div`\n\t${typography('description')};\n\tpadding: ${spacing(2)};\n\tcolor: ${color('content.primary')};\n`;\n\nexport const ButtonWrapper = styled.div<{ visible: boolean }>`\n\tvisibility: hidden;\n\n\t${modifier(\n\t\t'visible',\n\t\tcss`\n\t\t\tvisibility: visible;\n\t\t`,\n\t)}\n`;\n\nexport const Anchor = styled.button`\n\t${typography('description')}\n\t${withLinkStyle};\n\tborder: none;\n\tpadding-left: ${spacing(2)};\n`;\n","import { LoadingSignIcon } from '../../foundations/icons';\nimport { css, styled } from '../../utils/styled';\nimport { inputHeight, smallInputHeight } from '../../utils/styles';\nimport { color, fontFamily, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance, ButtonVariant, Size } from './Button';\n\ntype ButtonProps = {\n\tsize: Size;\n\tvariant: ButtonVariant;\n\tappearance: Appearance;\n\tactive: boolean;\n\tdisabled: boolean;\n\tisLoading: boolean;\n};\n\nconst appearanceToColorCode = (appearance: Appearance) => {\n\tconst colorCodes = {\n\t\tdefault: 'primary',\n\t\tprimary: 'primary',\n\t\tdanger: 'red',\n\t\twarning: 'yellow',\n\t} as const;\n\n\treturn colorCodes[appearance];\n};\n\nconst getOutlineStyles = (colorType: 'idle' | 'hover' | 'pressed', appearance: Appearance, transparent = false) => {\n\tif (appearance === 'default') {\n\t\treturn css`\n\t\t\tbackground-color: transparent;\n\t\t\tcolor: ${color('content.primary')};\n\t\t\tborder-color: ${color('content.primary')};\n\t\t`;\n\t}\n\n\tconst appearanceColorCode = appearanceToColorCode(appearance);\n\n\treturn css`\n\t\tbackground-color: ${transparent ? 'transparent' : color(`surface.${appearanceColorCode}50`)};\n\t\tborder-color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n\t\tcolor: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n\t`;\n};\n\nconst getColorStyles = (appearance: Appearance, colorCode: 'white' | 'black') => {\n\tif (appearance === 'default') {\n\t\treturn undefined;\n\t}\n\n\tconst appearanceColorCode = appearanceToColorCode(appearance);\n\n\treturn css`\n\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n\t\tborder-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n\t\tcolor: ${color(`content.${colorCode}`)};\n\n\t\t// hover\n\t\t&:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n\t\t\tcolor: ${color(`content.${colorCode}`)};\n\t\t}\n\n\t\t// pressed\n\t\t&:active:not([disabled]):not([aria-expanded='true']),\n\t\t&:focus:active:not([disabled]):not([aria-expanded='true']) {\n\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t}\n\n\t\t// activated\n\t\t${modifier(\n\t\t\t'active',\n\t\t\tcss`\n\t\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\t`,\n\t\t)}\n\t`;\n};\n\nconst variantColorStyles = css`\n\t${variants('appearance', {\n\t\tdefault: css<ButtonProps>`\n\t\t\tbackground-color: ${color(`content.white`)};\n\t\t\tcolor: ${color('primary.400')};\n\t\t\tborder-color: transparent;\n\n\t\t\t&:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\tcolor: ${color('primary.500')};\n\t\t\t}\n\t\t`,\n\t\tprimary: css<ButtonProps>`\n\t\t\t${getColorStyles('primary', 'white')}\n\t\t`,\n\t\twarning: css<ButtonProps>`\n\t\t\t${getColorStyles('warning', 'black')}\n\t\t`,\n\t\tdanger: css<ButtonProps>`\n\t\t\t${getColorStyles('danger', 'white')}\n\t\t`,\n\t})}\n\n\t${variants('variant', {\n\t\tsolid: css``,\n\t\toutline: css<ButtonProps>`\n\t\t\tborder-width: 1px;\n\t\t\t${({ appearance }) => css`\n\t\t\t\t${getOutlineStyles('idle', appearance, true)}\n\n\t\t\t\t// hover\n                &:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\t\t${getOutlineStyles('hover', appearance, true)}\n\t\t\t\t}\n\n\t\t\t\t// pressed\n\t\t\t\t&:active:not([disabled]):not([aria-expanded='true']),\n\t\t\t\t&:focus:active:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\t\t${getOutlineStyles('pressed', appearance)}\n\t\t\t\t}\n\n\t\t\t\t// activated\n\t\t\t\t${modifier('active', getOutlineStyles('pressed', appearance))}\n\t\t\t`}\n\t\t`,\n\t})}\n`;\n\nexport const Container = styled(Pressable)<ButtonProps>`\n\tdisplay: inline-flex;\n\talign-items: center;\n\tbackground-color: transparent;\n\tborder: 1px solid transparent;\n\ttext-decoration: none;\n\tvertical-align: middle;\n\tborder-radius: ${radius('md')};\n\tcursor: pointer;\n\tposition: relative;\n\ttransition: all ${transitionTime()};\n\tbox-sizing: border-box;\n\tfont-family: ${fontFamily('default')};\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\tfont-size: 11px;\n\t\t\tpadding: ${spacing(0, 2)};\n\t\t\theight: 20px;\n\t\t\tline-height: 12px;\n\t\t`,\n\t\tsm: css`\n\t\t\tfont-size: 12px;\n\t\t\tpadding: ${spacing(0, 3)};\n\t\t\theight: ${smallInputHeight}px;\n\t\t\tline-height: 12px;\n\t\t`,\n\t\tmd: css`\n\t\t\tfont-size: 14px;\n\t\t\tpadding: ${spacing(0, 3)};\n\t\t\theight: ${inputHeight}px;\n\t\t\tline-height: 14px;\n\t\t`,\n\t\tlg: css`\n\t\t\tfont-size: 18px;\n\t\t\tpadding: ${spacing(0, 4)};\n\t\t\theight: 45px;\n\t\t\tline-height: 18px;\n\t\t`,\n\t})}\n\n\t${variantColorStyles}\n\n    // disabled\n    &:disabled {\n\t\tcursor: not-allowed;\n\t\tbackground-color: ${color('surface.secondary')};\n\t\tcolor: ${color('content.disabled')};\n\t\tborder-color: ${color('content.disabled')};\n\n\t\t${modifier('isLoading', variantColorStyles)}\n\t}\n`;\n\nexport const Content = styled.span<{ isHidden: boolean; size: Size }>`\n\tdisplay: flex;\n\tflex-flow: row nowrap;\n\talign-items: center;\n\tjustify-content: center;\n\twidth: 100%;\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\tgap: ${spacing(1)};\n\t\t`,\n\t\tsm: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t\tmd: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t\tlg: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t})}\n\n\t${modifier(\n\t\t'isHidden',\n\t\tcss`\n\t\t\topacity: 0;\n\t\t`,\n\t)}\n`;\n\nexport const Text = styled.span<{ size: Size }>`\n\tposition: relative;\n\talign-items: center;\n\tdisplay: inline-flex;\n\twhite-space: nowrap;\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\ttop: 0;\n\t\t`,\n\t\tsm: css`\n\t\t\ttop: -1px; // Make text visually centered\n\t\t`,\n\t\tmd: css`\n\t\t\ttop: 0;\n\t\t`,\n\t\tlg: css`\n\t\t\ttop: -1px; // Make text visually centered\n\t\t`,\n\t})}\n`;\n\nexport const StyledLoadingSign = styled(LoadingSignIcon)`\n\tfont-size: 1.3em;\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n`;\n","import { css } from '../styled';\nimport { color, fontFamily, transitionTime } from '../theme';\n\nexport const withLinkStyle = css`\n\tcursor: pointer;\n\tfont-size: inherit;\n\tfont-weight: inherit;\n\tline-height: inherit;\n\tcolor: ${color('interactive.primary.idle')};\n\ttransition: color ${transitionTime()};\n\tbackground-color: transparent;\n\tpadding: 0;\n\tborder: none;\n\tfont-family: ${fontFamily('default')};\n\n\t&:hover,\n\t&:focus {\n\t\tcolor: ${color('interactive.primary.hover')};\n\t}\n\t&:active {\n\t\tcolor: ${color('interactive.primary.pressed')};\n\t}\n\t&:active:hover {\n\t\tcolor: ${color('interactive.primary.pressedHover')};\n\t}\n`;\n"],"names":[],"sourceRoot":""}