{"version":3,"file":"components-Radio-Radio-stories-mdx.9c1b36b9.iframe.bundle.js","mappings":";AAKA;AACA;;;;AAIA;;;AAKA;;;;;;;;;AASA;AACA;;;;;;;;;;;;;;;AAeA;;;;AAIA;;;;AAIA;AACA;;;;;;;;;;;;;;;AAeA;;;;;;;;AAQA;;AAIA;;AAIA;;AAEA;AAGA;AACA;;AAEA;ACrEA;ACfA;AACA;;AAEA;;AAEA;;;AAKA;;;;;;;;ACmBA;AACA;AACA;AACA;AAGA;AAIA;;;AAKA;AAGA;AAGA;AAGA;AAGA;AAGA;AAeA;AATA;AAGA;AAGA;AAGA;AAGA;AASA;AAHA;AAGA;AAGA;;;;ACvFA","sources":["webpack://@lokalise/louis/./src/components/Radio/styles.ts","webpack://@lokalise/louis/./src/components/Radio/RadioGroup.tsx","webpack://@lokalise/louis/./src/components/InputErrorMessage/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/utils/styles/outlineStyle.ts"],"sourcesContent":["import { styled } from '../../utils/styled';\nimport { outlineStyle } from '../../utils/styles';\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Label = styled.label`\n\tfont-family: ${fontFamily('default')};\n\t${typography('description')};\n\tdisplay: grid;\n\talign-items: center;\n\tgrid-template-columns: 1em auto;\n\tgap: ${spacing(1)};\n\t/* Required because of global styles applied by bootstrap */\n\tmargin: 0;\n`;\n\nexport const Input = styled.input`\n\t// Double selector specificity to fight bootstrap global styles\n\t&& {\n\t\tappearance: none;\n\t\tmargin: 0;\n\t\tfont: inherit;\n\t\tcolor: currentColor;\n\t\twidth: 1em;\n\t\theight: 1em;\n\t\tbackground-color: ${color('neutral2')};\n\t\tborder: 1px solid ${color('content.primary')};\n\t\tborder-radius: 50%;\n\n\t\t// To align the :before to the horizontal and vertical center\n\t\tdisplay: grid;\n\t\tplace-content: center;\n\t}\n\n\t&&:focus {\n\t\toutline: none;\n\t}\n\t/*\n    * Focus outline is only visible when user is using keyboard. This behavior matches native radio behavior.\n    */\n\t&&:focus-visible {\n\t\t${outlineStyle}\n\t}\n\n\t&&:checked {\n\t\tborder-color: ${color('primary.500')};\n\t}\n\n\t&&:disabled {\n\t\tbackground-color: ${color('surface.secondary')};\n\t\tborder-color: ${color('content.disabled')};\n\t\tcursor: not-allowed;\n\t}\n\n\t// Styling for the inner dot\n\t&&::before {\n\t\t// Has to be even number to be able to nicely align within the circle.\n\t\t// Numbers like 7.5px are not properly centered in Chrome.\n\t\t--size: 0.571em; // 8px\n\t\tcontent: '';\n\t\twidth: var(--size);\n\t\theight: var(--size);\n\t\tborder-radius: 50%;\n\t\ttransform: scale(0);\n\t\ttransition: 100ms transform ease-in-out;\n\t\tbackground-color: ${color('primary.500')};\n\t}\n\n\t&&:checked::before {\n\t\ttransform: scale(1);\n\t}\n\n\t&&:checked:disabled::before {\n\t\tbackground-color: ${color('content.disabled')};\n\t}\n`;\n\nexport const RadioGroupContainer = styled.div`\n\twidth: 100%;\n`;\n\nexport const StyledRadioGroup = styled.div`\n\tdisplay: grid;\n\tgap: ${spacing(3)};\n`;\n\nexport const RadioGroupErrorContainer = styled.div`\n\tpadding-top: ${spacing(3)};\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n`;\n","import React from 'react';\n\nimport { useErrorId } from '../../utils/hooks';\nimport { InputErrorMessage } from '../InputErrorMessage';\nimport type { RadioContextProps } from './RadioContext';\nimport { RadioContext } from './RadioContext';\nimport { RadioGroupContainer, RadioGroupErrorContainer, StyledRadioGroup } from './styles';\n\nexport interface RadioGroupProps extends RadioContextProps {\n\t/**\n\t * Renders a form validation `InputErrorMessage`.\n\t * */\n\terror?: string | string[];\n\t/**\n\t * Sets the css class attribute.\n\t * */\n\tclassName?: string;\n}\n\nexport const RadioGroup = ({ children, error, className, ...props }: RadioGroupProps) => {\n\tconst errorId = useErrorId();\n\n\treturn (\n\t\t<RadioContext {...props}>\n\t\t\t<RadioGroupContainer\n\t\t\t\trole=\"radiogroup\"\n\t\t\t\taria-errormessage={error ? errorId : undefined}\n\t\t\t\tclassName={className}\n\t\t\t>\n\t\t\t\t<StyledRadioGroup>{children}</StyledRadioGroup>\n\t\t\t\t{error && (\n\t\t\t\t\t<RadioGroupErrorContainer>\n\t\t\t\t\t\t<InputErrorMessage id={errorId}>{error}</InputErrorMessage>\n\t\t\t\t\t</RadioGroupErrorContainer>\n\t\t\t\t)}\n\t\t\t</RadioGroupContainer>\n\t\t</RadioContext>\n\t);\n};\n\nRadioGroup.displayName = 'RadioGroup';\n","import { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Error = styled.div`\n\tfont-family: ${fontFamily('default')};\n\t${typography('message')}\n\n\tcolor: ${color('red.600')};\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\tgrid-template-columns: min-content auto;\n\talign-items: center;\n`;\n\nexport const IconContainer = styled.div`\n\talign-self: flex-start;\n\tfont-size: 16px;\n\tdisplay: flex;\n\talign-items: center;\n`;\n","import { css, styled, type StyledProps } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type SvgIconColor = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n\tcolor?: SvgIconColor;\n\tfill?: SvgIconColor;\n\tstroke?: SvgIconColor;\n\tsize?: string;\n};\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n\tcolor: 'inherit',\n\tfill: 'currentColor',\n\tstroke: undefined,\n};\n\nconst colorHelper = (\n\tcolorType: keyof typeof colorTypesDefaults,\n\tinputColor: SvgIconColor | undefined,\n\tprops: StyledProps<unknown>,\n) =>\n\tinputColor && !reservedKeywords.includes(inputColor)\n\t\t? color(inputColor as NamedColor)(props)\n\t\t: colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n\tpointer-events: all;\n\tbox-sizing: border-box;\n\tcolor: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n\tfill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n\tstroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n\tfont-size: ${(props) => props.size};\n`;\n\nconst commonExcludedProps = ['fill', 'color', 'stroke'];\nexport const SvgRoot = styled.svg.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n\twidth: 1em;\n\theight: 1em;\n`;\n\nexport const SvgIconPath = styled.path.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconRect = styled.rect.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconG = styled.g.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconCircle = styled.circle.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconLinearGradient = styled.linearGradient.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconDefs = styled.defs.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconStop = styled.stop.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconClipPath = styled.clipPath.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n","import { css } from '../styled';\nimport { color } from '../theme';\n\nexport const outlineStyle = css`\n\toutline-width: 2px !important;\n\toutline-style: solid !important;\n\toutline-color: ${color('primary.500')} !important;\n\toutline-color: -webkit-focus-ring-color !important;\n\toutline-offset: 1px !important;\n`;\n"],"names":[],"sourceRoot":""}