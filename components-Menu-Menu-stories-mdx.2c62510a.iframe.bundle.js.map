{"version":3,"file":"components-Menu-Menu-stories-mdx.2c62510a.iframe.bundle.js","mappings":";AAWA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAQA;;ACtBA;;AAEA;;;;;;;;;ACMA;;;;AAIA;;;;;AAKA;;AAEA;;AAEA;;;;;;;;;AASA;;;;;AAKA;AACA;AACA;;;;;;;;;;AAUA;;;AAKA;;;ACnDA;AACA;;AAIA;;ACoBA;AACA;AAIA;AAGA;AACA;AACA;AAEA;AAUA;AACA;AACA;;;;AAIA;AACA;AACA;;;;;;AAMA;AACA;;;;AAIA;AAGA;AACA;;AAGA;AAIA;AAEA;AACA;;;;AAIA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;AAIA;AACA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;AAKA;;;;;;;AAOA;;;AAGA;;AAEA;;AAEA;;AAGA;;;AAIA;;AAEA;AACA;;AAGA;;AAEA;AACA;;AAGA;;AAEA;;;;;AAMA;;;;;AAKA;AACA;AACA;;AAEA;;AAIA;;;;;;;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;;AAQA;;;;;;AAMA;;AAIA;;AAGA;;AAGA;;;AAMA;;;;;;;;;;;AC1MA;AACA;AACA;AACA;AAGA;AAIA;;;AAKA;AAGA;AAGA;AAGA;AAGA;AAGA;AAeA;AATA;AAGA;AAGA;AAGA;AAGA;AASA;AAHA;AAGA;AAGA;;ACxFA;AAGA;AAGA;AACA;AACA;;;;AAIA;;;;;AAKA;;;;AAIA;;AAIA;AACA;;;AAGA;;AASA;;;AAGA;;;AAGA;AACA;AACA;;AAEA;AACA;;;;;;;;AAQA;;;;;AAKA;;;AAGA;AACA;AAGA;;;;AAIA;AACA;AACA;;;;;;;;;;AAUA;AACA;;;AAGA;AACA;AAGA;AACA;AACA;;;;;AAKA;AAYA;AAUA;AACA;AACA;AACA;;;AAGA;;;;AAIA;;AAGA;AACA;AACA;AACA;;;AAGA;;AAhCA","sources":["webpack://@lokalise/louis/./src/components/Menu/MenuList/MenuDrawer.tsx","webpack://@lokalise/louis/./src/components/Menu/MenuList/styles.ts","webpack://@lokalise/louis/./src/components/Menu/MenuItem/styles.ts","webpack://@lokalise/louis/./src/components/Menu/MenuDivider/index.ts","webpack://@lokalise/louis/./src/components/Button/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/utils/styles/inputStyle.ts"],"sourcesContent":["import { css, styled } from '../../../utils/styled';\nimport { color, modifier, radius, spacing, zIndex } from '../../../utils/theme';\n\nexport type MenuDrawerProps = {\n\t/**\n\t * Toggles full width rendering of the MenuDrawer.\n\t * */\n\tfullWidth?: boolean;\n};\n\nexport const MenuDrawer = styled.div<MenuDrawerProps>`\n\tbackground-color: ${color('background.primary')};\n\tpadding: ${spacing(1, 0)};\n\twidth: max-content;\n\tborder-radius: ${radius('md')};\n\tborder: 1px solid ${color('border.primary')};\n\tbox-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n\tz-index: ${zIndex('popover')};\n\n\t${modifier(\n\t\t'fullWidth',\n\t\tcss`\n\t\t\twidth: 100%;\n\t\t`,\n\t)}\n`;\n\nMenuDrawer.displayName = 'MenuDrawer';\n","import { css, styled } from '../../../utils/styled';\nimport { modifier, zIndex } from '../../../utils/theme';\n\nexport const Container = styled.div<{ fullWidth: boolean }>`\n\twidth: max-content;\n\tz-index: ${zIndex('popover')};\n\n\t${modifier(\n\t\t'fullWidth',\n\t\tcss`\n\t\t\twidth: 100%;\n\t\t`,\n\t)}\n\n\t&&&&:focus {\n\t\toutline: none !important;\n\t}\n`;\n","import { DoneIcon } from '../../../foundations/icons';\nimport { styled } from '../../../utils/styled';\nimport { color, fontFamily, spacing } from '../../../utils/theme';\n\nexport const StyledDoneIcon = styled(DoneIcon)`\n\tmargin-right: 4px;\n`;\n\n/**\n * Set default node for this element as \"div\". This is useful for cases when this component is used as a standalone\n * component. There could be a cases where it is nested inside a button element or a button element is nested\n * in it - in that cases there are DOM node validation errors. In case the user wants to turn it into accessible\n * component it is possible to user \"role\" attribute */\nexport const MenuItemContainer = styled.div`\n\tbox-sizing: border-box;\n\tmin-width: 0;\n\tline-height: 18px;\n\tfont-family: ${fontFamily('default')};\n\tfont-weight: normal;\n\tdisplay: flex;\n\talign-items: center;\n\tflex-wrap: wrap;\n\tpadding: ${spacing(2, 3)};\n\tfont-size: 13px;\n\tcolor: ${color('content.primary')};\n\tcursor: pointer;\n\tfill: ${color('content.primary')};\n\tposition: relative;\n\tborder: 0;\n\tbackground: none;\n\twidth: 100%;\n\ttext-decoration: none;\n\n\t// Fixes specific bug. In case the MenuItem becomes an anchor and mouse is hovered over the item and the arrows are used to change the focus of the menu item.\n\t&:hover:not([disabled]):not(:focus) {\n\t\tcolor: ${color('content.primary')};\n\t}\n\n\t&:focus,\n\t&:hover:not([disabled]):not([data-hover-disabled='true']) {\n\t\tbackground-color: ${color('primary.500')};\n\t\tcolor: ${color('content.white')};\n\t\tfill: ${color('content.white')};\n\t}\n\n\toutline: none !important;\n\t// Specificity wars. Solution is to delete all the \"outline: none;\" occurrences in the code. That would allow to get rid of !important inside outlineStyles.ts\n\t&&&&:focus {\n\t\toutline: none !important;\n\t}\n\n\t&:disabled {\n\t\tcolor: ${color('content.disabled')};\n\t\tcursor: not-allowed;\n\t}\n`;\n\nMenuItemContainer.displayName = 'MenuItemContainer';\n","import { styled } from '../../../utils/styled';\nimport { color, spacing } from '../../../utils/theme';\n\nexport const MenuDivider = styled.hr`\n\tdisplay: block;\n\theight: 1px;\n\tbackground-color: ${color('border.primary')};\n\tmargin: ${spacing(1, 0)} !important; // Necessary to override #tasks.tab-pane hr\n\tborder: none;\n`;\n\nMenuDivider.displayName = 'MenuDivider';\n","import { LoadingSignIcon } from '../../foundations/icons';\nimport { css, styled } from '../../utils/styled';\nimport { inputHeight, smallInputHeight } from '../../utils/styles';\nimport { color, fontFamily, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance, ButtonVariant, Size } from './Button';\n\ntype ButtonProps = {\n\tsize: Size;\n\tvariant: ButtonVariant;\n\tappearance: Appearance;\n\tactive: boolean;\n\tdisabled: boolean;\n\tisLoading: boolean;\n};\n\nconst appearanceToColorCode = (appearance: Appearance) => {\n\tconst colorCodes = {\n\t\tdefault: 'primary',\n\t\tprimary: 'primary',\n\t\tdanger: 'red',\n\t\twarning: 'yellow',\n\t} as const;\n\n\treturn colorCodes[appearance];\n};\n\nconst getOutlineStyles = (colorType: 'idle' | 'hover' | 'pressed', appearance: Appearance, transparent = false) => {\n\tif (appearance === 'default') {\n\t\treturn css`\n\t\t\tbackground-color: transparent;\n\t\t\tcolor: ${color('content.primary')};\n\t\t\tborder-color: ${color('content.primary')};\n\t\t`;\n\t}\n\n\tconst appearanceColorCode = appearanceToColorCode(appearance);\n\n\treturn css`\n\t\tbackground-color: ${transparent ? 'transparent' : color(`surface.${appearanceColorCode}50`)};\n\t\tborder-color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n\t\tcolor: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n\t`;\n};\n\nconst getColorStyles = (appearance: Appearance, colorCode: 'white' | 'black') => {\n\tif (appearance === 'default') {\n\t\treturn undefined;\n\t}\n\n\tconst appearanceColorCode = appearanceToColorCode(appearance);\n\n\treturn css`\n\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n\t\tborder-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n\t\tcolor: ${color(`content.${colorCode}`)};\n\n\t\t// hover\n\t\t&:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n\t\t\tcolor: ${color(`content.${colorCode}`)};\n\t\t}\n\n\t\t// pressed\n\t\t&:active:not([disabled]):not([aria-expanded='true']),\n\t\t&:focus:active:not([disabled]):not([aria-expanded='true']) {\n\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t}\n\n\t\t// activated\n\t\t${modifier(\n\t\t\t'active',\n\t\t\tcss`\n\t\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\t`,\n\t\t)}\n\t`;\n};\n\nconst variantColorStyles = css`\n\t${variants('appearance', {\n\t\tdefault: css<ButtonProps>`\n\t\t\tbackground-color: ${color(`content.white`)};\n\t\t\tcolor: ${color('primary.400')};\n\t\t\tborder-color: transparent;\n\n\t\t\t&:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\tcolor: ${color('primary.500')};\n\t\t\t}\n\t\t`,\n\t\tprimary: css<ButtonProps>`\n\t\t\t${getColorStyles('primary', 'white')}\n\t\t`,\n\t\twarning: css<ButtonProps>`\n\t\t\t${getColorStyles('warning', 'black')}\n\t\t`,\n\t\tdanger: css<ButtonProps>`\n\t\t\t${getColorStyles('danger', 'white')}\n\t\t`,\n\t})}\n\n\t${variants('variant', {\n\t\tsolid: css``,\n\t\toutline: css<ButtonProps>`\n\t\t\tborder-width: 1px;\n\t\t\t${({ appearance }) => css`\n\t\t\t\t${getOutlineStyles('idle', appearance, true)}\n\n\t\t\t\t// hover\n                &:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\t\t${getOutlineStyles('hover', appearance, true)}\n\t\t\t\t}\n\n\t\t\t\t// pressed\n\t\t\t\t&:active:not([disabled]):not([aria-expanded='true']),\n\t\t\t\t&:focus:active:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\t\t${getOutlineStyles('pressed', appearance)}\n\t\t\t\t}\n\n\t\t\t\t// activated\n\t\t\t\t${modifier('active', getOutlineStyles('pressed', appearance))}\n\t\t\t`}\n\t\t`,\n\t})}\n`;\n\nexport const Container = styled(Pressable)<ButtonProps>`\n\tdisplay: inline-flex;\n\talign-items: center;\n\tbackground-color: transparent;\n\tborder: 1px solid transparent;\n\ttext-decoration: none;\n\tvertical-align: middle;\n\tborder-radius: ${radius('md')};\n\tcursor: pointer;\n\tposition: relative;\n\ttransition: all ${transitionTime()};\n\tbox-sizing: border-box;\n\tfont-family: ${fontFamily('default')};\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\tfont-size: 11px;\n\t\t\tpadding: ${spacing(0, 2)};\n\t\t\theight: 20px;\n\t\t\tline-height: 12px;\n\t\t`,\n\t\tsm: css`\n\t\t\tfont-size: 12px;\n\t\t\tpadding: ${spacing(0, 3)};\n\t\t\theight: ${smallInputHeight}px;\n\t\t\tline-height: 12px;\n\t\t`,\n\t\tmd: css`\n\t\t\tfont-size: 14px;\n\t\t\tpadding: ${spacing(0, 3)};\n\t\t\theight: ${inputHeight}px;\n\t\t\tline-height: 14px;\n\t\t`,\n\t\tlg: css`\n\t\t\tfont-size: 18px;\n\t\t\tpadding: ${spacing(0, 4)};\n\t\t\theight: 45px;\n\t\t\tline-height: 18px;\n\t\t`,\n\t})}\n\n\t${variantColorStyles}\n\n    // disabled\n    &:disabled {\n\t\tcursor: not-allowed;\n\t\tbackground-color: ${color('surface.secondary')};\n\t\tcolor: ${color('content.disabled')};\n\t\tborder-color: ${color('content.disabled')};\n\n\t\t${modifier('isLoading', variantColorStyles)}\n\t}\n`;\n\nexport const Content = styled.span<{ isHidden: boolean; size: Size }>`\n\tdisplay: flex;\n\tflex-flow: row nowrap;\n\talign-items: center;\n\tjustify-content: center;\n\twidth: 100%;\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\tgap: ${spacing(1)};\n\t\t`,\n\t\tsm: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t\tmd: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t\tlg: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t})}\n\n\t${modifier(\n\t\t'isHidden',\n\t\tcss`\n\t\t\topacity: 0;\n\t\t`,\n\t)}\n`;\n\nexport const Text = styled.span<{ size: Size }>`\n\tposition: relative;\n\talign-items: center;\n\tdisplay: inline-flex;\n\twhite-space: nowrap;\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\ttop: 0;\n\t\t`,\n\t\tsm: css`\n\t\t\ttop: -1px; // Make text visually centered\n\t\t`,\n\t\tmd: css`\n\t\t\ttop: 0;\n\t\t`,\n\t\tlg: css`\n\t\t\ttop: -1px; // Make text visually centered\n\t\t`,\n\t})}\n`;\n\nexport const StyledLoadingSign = styled(LoadingSignIcon)`\n\tfont-size: 1.3em;\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n`;\n","import { css, styled, type StyledProps } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type SvgIconColor = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n\tcolor?: SvgIconColor;\n\tfill?: SvgIconColor;\n\tstroke?: SvgIconColor;\n\tsize?: string;\n};\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n\tcolor: 'inherit',\n\tfill: 'currentColor',\n\tstroke: undefined,\n};\n\nconst colorHelper = (\n\tcolorType: keyof typeof colorTypesDefaults,\n\tinputColor: SvgIconColor | undefined,\n\tprops: StyledProps<unknown>,\n) =>\n\tinputColor && !reservedKeywords.includes(inputColor)\n\t\t? color(inputColor as NamedColor)(props)\n\t\t: colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n\tpointer-events: all;\n\tbox-sizing: border-box;\n\tcolor: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n\tfill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n\tstroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n\tfont-size: ${(props) => props.size};\n`;\n\nconst commonExcludedProps = ['fill', 'color', 'stroke'];\nexport const SvgRoot = styled.svg.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n\twidth: 1em;\n\theight: 1em;\n`;\n\nexport const SvgIconPath = styled.path.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconRect = styled.rect.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconG = styled.g.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconCircle = styled.circle.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconLinearGradient = styled.linearGradient.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconDefs = styled.defs.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconStop = styled.stop.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconClipPath = styled.clipPath.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n","import type { CssDeclaration } from '../styled';\nimport { css } from '../styled';\nimport { color, fontFamily, modifier, radius, spacing, typography, variants } from '../theme';\n\nexport const withInputErrorStyle = css`\n\tborder-color: ${color('red.600')};\n`;\n\nexport const withInputErrorModifier = modifier('error', withInputErrorStyle);\n\nexport const withInputDisabledStyle = css`\n\tcolor: ${color('content.disabled')};\n\tbackground-color: ${color('surface.secondary')};\n\tborder-color: ${color('border.primary')};\n\n\t&:hover,\n\t[data-dev-state='hover'] & {\n\t\tborder-color: ${color('border.primary')};\n\t}\n\n\t&:focus,\n\t[data-dev-state='focus'] & {\n\t\tborder-color: ${color('border.primary')};\n\t}\n\n\t&::placeholder {\n\t\tcolor: ${color('content.disabled')};\n\t}\n`;\n\nexport const withInputDisabledModifier = css`\n\t${modifier('disabled', withInputDisabledStyle)}\n\n\t&:disabled {\n\t\t${withInputDisabledStyle}\n\t}\n`;\n\nexport interface InputStyleProps {\n\terror?: boolean;\n\tdisabled?: boolean;\n}\n\nexport const withInputContainerStyle = css<InputStyleProps>`\n\tbox-sizing: border-box;\n\n\t${typography('description')};\n\n\twidth: 100%;\n\tcolor: ${color('content.primary')};\n\tborder: 1px solid ${color('border.primary')};\n\tborder-radius: ${radius('md')};\n\ttransition: border-color ease-in-out 0.15s;\n\tpadding: ${spacing(2, 3)};\n\tbackground-color: ${color('background.input')};\n\n\t@media (prefers-reduced-motion: reduce) {\n\t\ttransition: none;\n\t}\n\n\t&:hover,\n\t[data-dev-state='hover'] & {\n\t\tborder-color: ${color('primary.300')};\n\t}\n\n\t&:focus-within,\n\t[data-dev-state='focus'] & {\n\t\tborder-color: ${color('primary.500')};\n\t}\n\n\t${withInputErrorModifier}\n\t${withInputDisabledModifier}\n`;\n\nexport const withInputFieldStyle = css<InputStyleProps>`\n\tbox-sizing: content-box;\n\t-webkit-font-smoothing: subpixel-antialiased;\n\n\tfont-family: ${fontFamily('default')};\n\t${typography('description')};\n\tcolor: ${color('content.primary')};\n\tbackground: none;\n\n\t&&&:focus,\n\t&&&:focus-visible,\n\t[data-dev-state='focus'] &&& {\n\t\toutline: none !important;\n\t}\n\n\t&::placeholder {\n\t\t${typography('description')};\n\t\tcolor: ${color('content.secondary')};\n\t}\n\n\t${withInputErrorModifier}\n\t${withInputDisabledModifier}\n`;\n\nexport const withInputStyle = css<InputStyleProps>`\n\t${withInputContainerStyle};\n\t${withInputFieldStyle};\n\n\t// Unfortunately, we need order of container -> input, but we need certain props from container\n\t// so we override those here. Currently I don't see way to combine those styles cleaner.\n\tbox-sizing: border-box;\n\tbackground: ${color('background.input')};\n`;\n\nexport type InputSizeVariants = 'small' | 'default';\n\n/**\n * This helper allows us to define custom styles for inputs in a way that allows size names, defaults and ensuring\n * that all required sizes are defined.\n */\nexport const buildInputSizeStyles = <T extends object>(sizeStyles: Record<InputSizeVariants, CssDeclaration<T>>) =>\n\tvariants('inputSize', sizeStyles, 'default');\n\nexport const inputHeight = 35;\nexport const smallInputHeight = 30;\n\nconst inputTopBottomBorderWidth = 2;\n\nconst inputElementHeight = inputHeight - inputTopBottomBorderWidth;\nconst smallInputElementHeight = smallInputHeight - inputTopBottomBorderWidth;\n\nexport const withInputSizeVariants = buildInputSizeStyles({\n\tsmall: css`\n\t\theight: ${smallInputElementHeight}px;\n\t\tmin-height: ${smallInputElementHeight}px;\n\t\tline-height: ${smallInputElementHeight}px;\n\t\t${typography('caption1')};\n\n\t\t&::placeholder {\n\t\t\t${typography('caption1')}\n\t\t}\n\n\t\t&::-moz-placeholder {\n\t\t\tline-height: ${smallInputElementHeight}px;\n\t\t}\n\t`,\n\tdefault: css`\n\t\theight: ${inputElementHeight}px;\n\t\tmin-height: ${inputElementHeight}px;\n\t\tline-height: ${inputElementHeight}px;\n\n\t\t&::-moz-placeholder {\n\t\t\tline-height: ${inputElementHeight}px;\n\t\t}\n\t`,\n});\n"],"names":[],"sourceRoot":""}