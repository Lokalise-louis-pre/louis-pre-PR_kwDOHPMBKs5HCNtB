{"version":3,"file":"components-Popover-Popover-stories-mdx.5bbef37b.iframe.bundle.js","mappings":";AAcA;AACA;;ACgBA;AACA;AAIA;AAGA;AACA;AACA;AAEA;AAUA;AACA;AACA;;;;AAIA;AACA;AACA;;;;;;AAMA;AACA;;;;AAIA;AAGA;AACA;;AAGA;AAIA;AAEA;AACA;;;;AAIA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;AAIA;AACA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;AAKA;;;;;;;AAOA;;;AAGA;;AAEA;;AAEA;;AAGA;;;AAIA;;AAEA;AACA;;AAGA;;AAEA;AACA;;AAGA;;AAEA;;;;;AAMA;;;;;AAKA;AACA;AACA;;AAEA;;AAIA;;;;;;;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;;AAQA;;;;;;AAMA;;AAIA;;AAGA;;AAGA;;;AAMA;;;;;;;;;;;;;;;AC3NA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;;;;AAWA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;;AAGA;AAuBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;AChEA;AACA;AACA;AACA;AAGA;AAIA;;;AAKA;AAGA;AAGA;AAGA;AAGA;AAGA;AAeA;AATA;AAGA;AAGA;AAGA;AAGA;AASA;AAHA;AAGA;AAGA;;ACxFA;AAGA;AAGA;AACA;AACA;;;;AAIA;;;;;AAKA;;;;AAIA;;AAIA;AACA;;;AAGA;;AASA;;;AAGA;;;AAGA;AACA;AACA;;AAEA;AACA;;;;;;;;AAQA;;;;;AAKA;;;AAGA;AACA;AAGA;;;;AAIA;AACA;AACA;;;;;;;;;;AAUA;AACA;;;AAGA;AACA;AAGA;AACA;AACA;;;;;AAKA;AAYA;AAUA;AACA;AACA;AACA;;;AAGA;;;;AAIA;;AAGA;AACA;AACA;AACA;;;AAGA;;AAhCA","sources":["webpack://@lokalise/louis/./src/components/Popover/Popover.stories.mdx","webpack://@lokalise/louis/./src/components/Button/styles.ts","webpack://@lokalise/louis/./src/components/Popover/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/utils/styles/inputStyle.ts"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs';\nimport { styled } from '../../utils/styled';\nimport { color } from '../../utils/theme';\nimport { Button } from '../Button';\nimport { Popover } from './Popover';\nexport const PopoverContent = Object.assign(styled.div`\n\t\tcolor: ${color('content.primary')};\n\t`, {\n  displayName: 'div'\n});\nexport const Template = args => <Popover {...args} mdxType=\"Popover\" />;\n\nconst layoutProps = {\n  PopoverContent,\nTemplate\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Components/Popover\" component={Popover} parameters={{\n      controls: {\n        sort: 'requiredFirst',\n        exclude: ['children', 'popoverContent', 'components']\n      },\n      docs: {\n        source: {\n          excludeDecorators: true\n        }\n      }\n    }} argTypes={{\n      visibleCallback: {\n        action: 'visibleCallback'\n      }\n    }} decorators={[Story => <div style={{\n      marginBottom: '45px'\n    }}>{Story()}</div>]} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"popover\"\n    }}>{`Popover`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#overview\"\n        }}>{`Overview`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#figma-design-file\"\n        }}>{`Figma Design File`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#props\"\n        }}>{`Props`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#examples\"\n        }}>{`Examples`}</a></li>\n    </ul>\n    <h2 id=\"overview\">Overview</h2>\n    <p>{`Popover is used to display in-product help content, attached to the child element passed to it.`}</p>\n    <p>{`Popover depends on:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <a href=\"https://popper.js.org/react-popper/\" target=\"_blank\">\n\treact-popper\n        </a>\n      </li>\n      <li parentName=\"ul\">\n        <a href=\"https://popper.js.org/docs/v2/\" target=\"_blank\">\n\tpopperjs\n        </a>\n      </li>\n      <li parentName=\"ul\">\n        <a href=\"https://github.com/maslianok/react-resize-detector\" target=\"_blank\">\n\treact-resize-detector\n        </a>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @lokalise/louis\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Popover } from '@lokalise/louis';\n\nexport default () => <Popover popoverContent=\"Popover content\">Hello World</Popover>;\n`}</code></pre>\n    <h2 id=\"figma-design-file\">Figma Design File</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <a href=\"https://www.figma.com/file/zfCOLmZam4nrttG6IVzQyz/UI-Library?node-id=4029%3A21088\" target=\"_blank\">\n\tFigma Source File | Popover\n        </a>\n      </li>\n    </ul>\n    <h2 id=\"props\">Props</h2>\n    <ArgsTable of={Popover} sort=\"requiredFirst\" mdxType=\"ArgsTable\" />\n    <h2 id=\"examples\">Examples</h2>\n    <h3 {...{\n      \"id\": \"trigger-event\"\n    }}>{`Trigger Event`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"On Click\" args={{\n        withArrow: true,\n        popoverContent: <PopoverContent style={{\n          padding: '16px'\n        }} mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">On click</Button>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n\t<Story name=\"On Hover\" args={{\n        withArrow: true,\n        triggerEvent: 'hover',\n        popoverContent: <PopoverContent style={{\n          padding: '16px'\n        }} mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">On hover</Button>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n\t<Story name=\"On Disabled Hover\" args={{\n        withArrow: true,\n        triggerEvent: 'hover',\n        popoverContent: <PopoverContent style={{\n          padding: '16px'\n        }} mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <Button variant=\"outline\" disabled mdxType=\"Button\">\n\t\t\t\t\tOn disabled hover\n\t\t\t\t</Button>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"offset-and-placement\"\n    }}>{`Offset and Placement`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Offset\" args={{\n        withArrow: false,\n        offset: 5,\n        popoverContent: <PopoverContent style={{\n          padding: '16px'\n        }} mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">Offset: 5</Button>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n\t<Story name=\"Placement\" args={{\n        withArrow: true,\n        placement: 'right',\n        popoverContent: <PopoverContent style={{\n          padding: '16px'\n        }} mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">Placement: right</Button>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"render-in-portal\"\n    }}>{`Render in Portal`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Portal\" args={{\n        inPortal: true,\n        popoverContent: <PopoverContent style={{\n          padding: '16px'\n        }} mdxType=\"PopoverContent\">Rendered in `div.louis-portal`</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">Open in Portal</Button>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n\nexport const onClick = Template.bind({});\nonClick.storyName = 'On Click';\nonClick.args = {\n  withArrow: true,\n  popoverContent: <PopoverContent style={{\n    padding: '16px'\n  }}>Popover content</PopoverContent>,\n  children: <Button variant=\"outline\">On click</Button>\n};\nonClick.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const onHover = Template.bind({});\nonHover.storyName = 'On Hover';\nonHover.args = {\n  withArrow: true,\n  triggerEvent: 'hover',\n  popoverContent: <PopoverContent style={{\n    padding: '16px'\n  }}>Popover content</PopoverContent>,\n  children: <Button variant=\"outline\">On hover</Button>\n};\nonHover.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const onDisabledHover = Template.bind({});\nonDisabledHover.storyName = 'On Disabled Hover';\nonDisabledHover.args = {\n  withArrow: true,\n  triggerEvent: 'hover',\n  popoverContent: <PopoverContent style={{\n    padding: '16px'\n  }}>Popover content</PopoverContent>,\n  children: <Button variant=\"outline\" disabled>\n\t\t\t\t\tOn disabled hover\n\t\t\t\t</Button>\n};\nonDisabledHover.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const offset = Template.bind({});\noffset.storyName = 'Offset';\noffset.args = {\n  withArrow: false,\n  offset: 5,\n  popoverContent: <PopoverContent style={{\n    padding: '16px'\n  }}>Popover content</PopoverContent>,\n  children: <Button variant=\"outline\">Offset: 5</Button>\n};\noffset.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const placement = Template.bind({});\nplacement.storyName = 'Placement';\nplacement.args = {\n  withArrow: true,\n  placement: 'right',\n  popoverContent: <PopoverContent style={{\n    padding: '16px'\n  }}>Popover content</PopoverContent>,\n  children: <Button variant=\"outline\">Placement: right</Button>\n};\nplacement.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const portal = Template.bind({});\nportal.storyName = 'Portal';\nportal.args = {\n  inPortal: true,\n  popoverContent: <PopoverContent style={{\n    padding: '16px'\n  }}>Rendered in `div.louis-portal`</PopoverContent>,\n  children: <Button variant=\"outline\">Open in Portal</Button>\n};\nportal.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nconst componentMeta = { title: 'Components/Popover', parameters: {\n  controls: {\n    sort: 'requiredFirst',\n    exclude: ['children', 'popoverContent', 'components']\n  },\n  docs: {\n    source: {\n      excludeDecorators: true\n    }\n  }\n}, decorators: [Story => <div style={{\n  marginBottom: '45px'\n}}>{Story()}</div>], component: Popover, argTypes: {\n  visibleCallback: {\n    action: 'visibleCallback'\n  }\n}, includeStories: [\"onClick\",\"onHover\",\"onDisabledHover\",\"offset\",\"placement\",\"portal\"],  };\n\nconst mdxStoryNameToKey = {\"On Click\":\"onClick\",\"On Hover\":\"onHover\",\"On Disabled Hover\":\"onDisabledHover\",\"Offset\":\"offset\",\"Placement\":\"placement\",\"Portal\":\"portal\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import { LoadingSignIcon } from '../../foundations/icons';\nimport { css, styled } from '../../utils/styled';\nimport { inputHeight, smallInputHeight } from '../../utils/styles';\nimport { color, fontFamily, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance, ButtonVariant, Size } from './Button';\n\ntype ButtonProps = {\n\tsize: Size;\n\tvariant: ButtonVariant;\n\tappearance: Appearance;\n\tactive: boolean;\n\tdisabled: boolean;\n\tisLoading: boolean;\n};\n\nconst appearanceToColorCode = (appearance: Appearance) => {\n\tconst colorCodes = {\n\t\tdefault: 'primary',\n\t\tprimary: 'primary',\n\t\tdanger: 'red',\n\t\twarning: 'yellow',\n\t} as const;\n\n\treturn colorCodes[appearance];\n};\n\nconst getOutlineStyles = (colorType: 'idle' | 'hover' | 'pressed', appearance: Appearance, transparent = false) => {\n\tif (appearance === 'default') {\n\t\treturn css`\n\t\t\tbackground-color: transparent;\n\t\t\tcolor: ${color('content.primary')};\n\t\t\tborder-color: ${color('content.primary')};\n\t\t`;\n\t}\n\n\tconst appearanceColorCode = appearanceToColorCode(appearance);\n\n\treturn css`\n\t\tbackground-color: ${transparent ? 'transparent' : color(`surface.${appearanceColorCode}50`)};\n\t\tborder-color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n\t\tcolor: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n\t`;\n};\n\nconst getColorStyles = (appearance: Appearance, colorCode: 'white' | 'black') => {\n\tif (appearance === 'default') {\n\t\treturn undefined;\n\t}\n\n\tconst appearanceColorCode = appearanceToColorCode(appearance);\n\n\treturn css`\n\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n\t\tborder-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n\t\tcolor: ${color(`content.${colorCode}`)};\n\n\t\t// hover\n\t\t&:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n\t\t\tcolor: ${color(`content.${colorCode}`)};\n\t\t}\n\n\t\t// pressed\n\t\t&:active:not([disabled]):not([aria-expanded='true']),\n\t\t&:focus:active:not([disabled]):not([aria-expanded='true']) {\n\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t}\n\n\t\t// activated\n\t\t${modifier(\n\t\t\t'active',\n\t\t\tcss`\n\t\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\t`,\n\t\t)}\n\t`;\n};\n\nconst variantColorStyles = css`\n\t${variants('appearance', {\n\t\tdefault: css<ButtonProps>`\n\t\t\tbackground-color: ${color(`content.white`)};\n\t\t\tcolor: ${color('primary.400')};\n\t\t\tborder-color: transparent;\n\n\t\t\t&:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\tcolor: ${color('primary.500')};\n\t\t\t}\n\t\t`,\n\t\tprimary: css<ButtonProps>`\n\t\t\t${getColorStyles('primary', 'white')}\n\t\t`,\n\t\twarning: css<ButtonProps>`\n\t\t\t${getColorStyles('warning', 'black')}\n\t\t`,\n\t\tdanger: css<ButtonProps>`\n\t\t\t${getColorStyles('danger', 'white')}\n\t\t`,\n\t})}\n\n\t${variants('variant', {\n\t\tsolid: css``,\n\t\toutline: css<ButtonProps>`\n\t\t\tborder-width: 1px;\n\t\t\t${({ appearance }) => css`\n\t\t\t\t${getOutlineStyles('idle', appearance, true)}\n\n\t\t\t\t// hover\n                &:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\t\t${getOutlineStyles('hover', appearance, true)}\n\t\t\t\t}\n\n\t\t\t\t// pressed\n\t\t\t\t&:active:not([disabled]):not([aria-expanded='true']),\n\t\t\t\t&:focus:active:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\t\t${getOutlineStyles('pressed', appearance)}\n\t\t\t\t}\n\n\t\t\t\t// activated\n\t\t\t\t${modifier('active', getOutlineStyles('pressed', appearance))}\n\t\t\t`}\n\t\t`,\n\t})}\n`;\n\nexport const Container = styled(Pressable)<ButtonProps>`\n\tdisplay: inline-flex;\n\talign-items: center;\n\tbackground-color: transparent;\n\tborder: 1px solid transparent;\n\ttext-decoration: none;\n\tvertical-align: middle;\n\tborder-radius: ${radius('md')};\n\tcursor: pointer;\n\tposition: relative;\n\ttransition: all ${transitionTime()};\n\tbox-sizing: border-box;\n\tfont-family: ${fontFamily('default')};\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\tfont-size: 11px;\n\t\t\tpadding: ${spacing(0, 2)};\n\t\t\theight: 20px;\n\t\t\tline-height: 12px;\n\t\t`,\n\t\tsm: css`\n\t\t\tfont-size: 12px;\n\t\t\tpadding: ${spacing(0, 3)};\n\t\t\theight: ${smallInputHeight}px;\n\t\t\tline-height: 12px;\n\t\t`,\n\t\tmd: css`\n\t\t\tfont-size: 14px;\n\t\t\tpadding: ${spacing(0, 3)};\n\t\t\theight: ${inputHeight}px;\n\t\t\tline-height: 14px;\n\t\t`,\n\t\tlg: css`\n\t\t\tfont-size: 18px;\n\t\t\tpadding: ${spacing(0, 4)};\n\t\t\theight: 45px;\n\t\t\tline-height: 18px;\n\t\t`,\n\t})}\n\n\t${variantColorStyles}\n\n    // disabled\n    &:disabled {\n\t\tcursor: not-allowed;\n\t\tbackground-color: ${color('surface.secondary')};\n\t\tcolor: ${color('content.disabled')};\n\t\tborder-color: ${color('content.disabled')};\n\n\t\t${modifier('isLoading', variantColorStyles)}\n\t}\n`;\n\nexport const Content = styled.span<{ isHidden: boolean; size: Size }>`\n\tdisplay: flex;\n\tflex-flow: row nowrap;\n\talign-items: center;\n\tjustify-content: center;\n\twidth: 100%;\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\tgap: ${spacing(1)};\n\t\t`,\n\t\tsm: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t\tmd: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t\tlg: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t})}\n\n\t${modifier(\n\t\t'isHidden',\n\t\tcss`\n\t\t\topacity: 0;\n\t\t`,\n\t)}\n`;\n\nexport const Text = styled.span<{ size: Size }>`\n\tposition: relative;\n\talign-items: center;\n\tdisplay: inline-flex;\n\twhite-space: nowrap;\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\ttop: 0;\n\t\t`,\n\t\tsm: css`\n\t\t\ttop: -1px; // Make text visually centered\n\t\t`,\n\t\tmd: css`\n\t\t\ttop: 0;\n\t\t`,\n\t\tlg: css`\n\t\t\ttop: -1px; // Make text visually centered\n\t\t`,\n\t})}\n`;\n\nexport const StyledLoadingSign = styled(LoadingSignIcon)`\n\tfont-size: 1.3em;\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n`;\n","import type { Placement } from '@popperjs/core/lib/enums';\nimport type { HTMLAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography, variants, zIndex } from '../../utils/theme';\n\nconst bottom = css`\n\ttop: -5px;\n\n\t&::before {\n\t\tborder-left-width: 1px;\n\t\tborder-left-style: solid;\n\t\tborder-top-width: 1px;\n\t\tborder-top-style: solid;\n\t}\n`;\nconst top = css`\n\tbottom: -5px;\n\n\t&::before {\n\t\tborder-right-width: 1px;\n\t\tborder-right-style: solid;\n\t\tborder-bottom-width: 1px;\n\t\tborder-bottom-style: solid;\n\t}\n`;\nconst left = css`\n\tright: -5px;\n\n\t&::before {\n\t\tborder-right-width: 1px;\n\t\tborder-right-style: solid;\n\t\tborder-top-width: 1px;\n\t\tborder-top-style: solid;\n\t}\n`;\nconst right = css`\n\tleft: -5px;\n\n\t&::before {\n\t\tborder-left-width: 1px;\n\t\tborder-left-style: solid;\n\t\tborder-bottom-width: 1px;\n\t\tborder-bottom-style: solid;\n\t}\n`;\n\nexport const Arrow = styled.div<{ placement?: Placement }>`\n\tposition: absolute;\n\twidth: 8px;\n\theight: 8px;\n\tz-index: ${zIndex('hide')};\n\n\t&::before {\n\t\tposition: absolute;\n\t\twidth: 8px;\n\t\theight: 8px;\n\t\tz-index: ${zIndex('hide')};\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\ttransform: rotate(45deg);\n\t\tbackground-color: ${color('background.primary')};\n\t\tborder-color: ${color('border.primary')};\n\t}\n\n\t${variants(\n\t\t'placement',\n\t\t{\n\t\t\ttop,\n\t\t\tbottom,\n\t\t\tleft,\n\t\t\tright,\n\t\t\t'right-end': right,\n\t\t\t'right-start': right,\n\t\t\t'left-start': left,\n\t\t\t'auto-end': css``,\n\t\t\t'auto-start': css``,\n\t\t\tauto: css``,\n\t\t\t'bottom-end': bottom,\n\t\t\t'bottom-start': bottom,\n\t\t\t'left-end': left,\n\t\t\t'top-end': top,\n\t\t\t'top-start': top,\n\t\t},\n\t\t'auto',\n\t)}\n`;\n\nexport const Content = styled.div<HTMLAttributes<HTMLElement>>`\n\tpadding: 0;\n\tborder-radius: ${radius('md')};\n\tbackground-color: ${color('background.primary')};\n\tborder: 1px solid ${color('border.primary')};\n\tbox-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n\tz-index: ${zIndex('popover')};\n\tcolor: ${color('content.primary')};\n\tfont-family: ${fontFamily('default')};\n\t${typography('description')};\n`;\n","import { css, styled, type StyledProps } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type SvgIconColor = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n\tcolor?: SvgIconColor;\n\tfill?: SvgIconColor;\n\tstroke?: SvgIconColor;\n\tsize?: string;\n};\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n\tcolor: 'inherit',\n\tfill: 'currentColor',\n\tstroke: undefined,\n};\n\nconst colorHelper = (\n\tcolorType: keyof typeof colorTypesDefaults,\n\tinputColor: SvgIconColor | undefined,\n\tprops: StyledProps<unknown>,\n) =>\n\tinputColor && !reservedKeywords.includes(inputColor)\n\t\t? color(inputColor as NamedColor)(props)\n\t\t: colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n\tpointer-events: all;\n\tbox-sizing: border-box;\n\tcolor: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n\tfill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n\tstroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n\tfont-size: ${(props) => props.size};\n`;\n\nconst commonExcludedProps = ['fill', 'color', 'stroke'];\nexport const SvgRoot = styled.svg.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n\twidth: 1em;\n\theight: 1em;\n`;\n\nexport const SvgIconPath = styled.path.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconRect = styled.rect.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconG = styled.g.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconCircle = styled.circle.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconLinearGradient = styled.linearGradient.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconDefs = styled.defs.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconStop = styled.stop.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconClipPath = styled.clipPath.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n","import type { CssDeclaration } from '../styled';\nimport { css } from '../styled';\nimport { color, fontFamily, modifier, radius, spacing, typography, variants } from '../theme';\n\nexport const withInputErrorStyle = css`\n\tborder-color: ${color('red.600')};\n`;\n\nexport const withInputErrorModifier = modifier('error', withInputErrorStyle);\n\nexport const withInputDisabledStyle = css`\n\tcolor: ${color('content.disabled')};\n\tbackground-color: ${color('surface.secondary')};\n\tborder-color: ${color('border.primary')};\n\n\t&:hover,\n\t[data-dev-state='hover'] & {\n\t\tborder-color: ${color('border.primary')};\n\t}\n\n\t&:focus,\n\t[data-dev-state='focus'] & {\n\t\tborder-color: ${color('border.primary')};\n\t}\n\n\t&::placeholder {\n\t\tcolor: ${color('content.disabled')};\n\t}\n`;\n\nexport const withInputDisabledModifier = css`\n\t${modifier('disabled', withInputDisabledStyle)}\n\n\t&:disabled {\n\t\t${withInputDisabledStyle}\n\t}\n`;\n\nexport interface InputStyleProps {\n\terror?: boolean;\n\tdisabled?: boolean;\n}\n\nexport const withInputContainerStyle = css<InputStyleProps>`\n\tbox-sizing: border-box;\n\n\t${typography('description')};\n\n\twidth: 100%;\n\tcolor: ${color('content.primary')};\n\tborder: 1px solid ${color('border.primary')};\n\tborder-radius: ${radius('md')};\n\ttransition: border-color ease-in-out 0.15s;\n\tpadding: ${spacing(2, 3)};\n\tbackground-color: ${color('background.input')};\n\n\t@media (prefers-reduced-motion: reduce) {\n\t\ttransition: none;\n\t}\n\n\t&:hover,\n\t[data-dev-state='hover'] & {\n\t\tborder-color: ${color('primary.300')};\n\t}\n\n\t&:focus-within,\n\t[data-dev-state='focus'] & {\n\t\tborder-color: ${color('primary.500')};\n\t}\n\n\t${withInputErrorModifier}\n\t${withInputDisabledModifier}\n`;\n\nexport const withInputFieldStyle = css<InputStyleProps>`\n\tbox-sizing: content-box;\n\t-webkit-font-smoothing: subpixel-antialiased;\n\n\tfont-family: ${fontFamily('default')};\n\t${typography('description')};\n\tcolor: ${color('content.primary')};\n\tbackground: none;\n\n\t&&&:focus,\n\t&&&:focus-visible,\n\t[data-dev-state='focus'] &&& {\n\t\toutline: none !important;\n\t}\n\n\t&::placeholder {\n\t\t${typography('description')};\n\t\tcolor: ${color('content.secondary')};\n\t}\n\n\t${withInputErrorModifier}\n\t${withInputDisabledModifier}\n`;\n\nexport const withInputStyle = css<InputStyleProps>`\n\t${withInputContainerStyle};\n\t${withInputFieldStyle};\n\n\t// Unfortunately, we need order of container -> input, but we need certain props from container\n\t// so we override those here. Currently I don't see way to combine those styles cleaner.\n\tbox-sizing: border-box;\n\tbackground: ${color('background.input')};\n`;\n\nexport type InputSizeVariants = 'small' | 'default';\n\n/**\n * This helper allows us to define custom styles for inputs in a way that allows size names, defaults and ensuring\n * that all required sizes are defined.\n */\nexport const buildInputSizeStyles = <T extends object>(sizeStyles: Record<InputSizeVariants, CssDeclaration<T>>) =>\n\tvariants('inputSize', sizeStyles, 'default');\n\nexport const inputHeight = 35;\nexport const smallInputHeight = 30;\n\nconst inputTopBottomBorderWidth = 2;\n\nconst inputElementHeight = inputHeight - inputTopBottomBorderWidth;\nconst smallInputElementHeight = smallInputHeight - inputTopBottomBorderWidth;\n\nexport const withInputSizeVariants = buildInputSizeStyles({\n\tsmall: css`\n\t\theight: ${smallInputElementHeight}px;\n\t\tmin-height: ${smallInputElementHeight}px;\n\t\tline-height: ${smallInputElementHeight}px;\n\t\t${typography('caption1')};\n\n\t\t&::placeholder {\n\t\t\t${typography('caption1')}\n\t\t}\n\n\t\t&::-moz-placeholder {\n\t\t\tline-height: ${smallInputElementHeight}px;\n\t\t}\n\t`,\n\tdefault: css`\n\t\theight: ${inputElementHeight}px;\n\t\tmin-height: ${inputElementHeight}px;\n\t\tline-height: ${inputElementHeight}px;\n\n\t\t&::-moz-placeholder {\n\t\t\tline-height: ${inputElementHeight}px;\n\t\t}\n\t`,\n});\n"],"names":[],"sourceRoot":""}