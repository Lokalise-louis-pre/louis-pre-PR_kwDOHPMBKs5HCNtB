{"version":3,"file":"components-Checkbox-Checkbox-stories-mdx.bba7d3f0.iframe.bundle.js","mappings":";;;;AAQA;;AAIA;;;;AAIA;AACA;;;;;AAKA;AACA;;;;;AAKA;;;;;AAKA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;AAIA;;;;;;;;;;;;;;;AAeA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;AAIA;;;;AAIA;;AAEA;;AAIA;AACA;AACA;;AAIA;;AAIA;;AAEA;AAGA;AACA;;AAEA;;ACjJA;AACA;;AAEA;;AAEA;;;AAKA;;;;;;;;ACmBA;AACA;AACA;AACA;AAGA;AAIA;;;AAKA;AAGA;AAGA;AAGA;AAGA;AAGA;AAeA;AATA;AAGA;AAGA;AAGA;AAGA;AASA;AAHA;AAGA;AAGA;;;;ACvFA","sources":["webpack://@lokalise/louis/./src/components/Checkbox/Checkbox.styles.tsx","webpack://@lokalise/louis/./src/components/InputErrorMessage/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/utils/styles/outlineStyle.ts"],"sourcesContent":["import { styled } from '../../utils/styled';\nimport { outlineStyle } from '../../utils/styles';\nimport { color, fontFamily, radius, spacing, transitionTime, typography } from '../../utils/theme';\n\nexport const Container = styled.div`\n\tposition: relative;\n\tdisplay: grid;\n\tgrid-auto-flow: row;\n\tgap: ${spacing(1)};\n\twidth: 100%;\n`;\n\nexport const CheckboxInput = styled.input`\n\t/* First we set colors */\n\n\t/* Unchecked */\n\t--accent: ${color('border.primary')};\n\t--backdrop: ${color('background.primary')};\n\n\t/* Checked or Indeterminate */\n\t&:checked,\n\t&:indeterminate {\n\t\t--accent: ${color('interactive.primary.idle')};\n\t\t--backdrop: ${color('neutral2')};\n\t}\n\n\t/* Hover */\n\t&:hover {\n\t\t--accent: ${color('interactive.primary.hover')};\n\t}\n\n\t/* Pressed */\n\t&:active {\n\t\t--accent: ${color('interactive.primary.pressed')};\n\t}\n\n\t/* Error */\n\t&[aria-invalid='true'] {\n\t\t--accent: ${color('interactive.red.idle')};\n\t\t--backdrop: ${color('surface.red50')};\n\t}\n\n\t/* Disabled */\n\t&:disabled {\n\t\t--accent: ${color('interactive.content.disabled')};\n\t\t--backdrop: ${color('surface.secondary')};\n\n\t\t&:checked,\n\t\t&:indeterminate {\n\t\t\t--backdrop: ${color('neutral2')};\n\t\t}\n\t}\n\n\t/* Create a custom checkbox and hide the browser's default checkbox */\n\n\t/* Unchecked */\n\tdisplay: inline-block;\n\tappearance: none;\n\tmargin: 0;\n\theight: 14px;\n\twidth: 14px;\n\tbox-sizing: border-box;\n\tborder: 1px solid var(--accent);\n\tbackground-color: var(--backdrop);\n\tborder-radius: ${radius('sm')};\n\ttransition: background-color ${transitionTime()}, border ${transitionTime()};\n\n\t/* Checked  */\n\t/* ':where' causes this selector not to gain specificity and allows other styles to override it. Without it it had more specificity than '&[aria-invalid='true']' */\n\t&:checked:where(:not(:indeterminate)) {\n\t\tbackground-color: var(--accent);\n\t\tborder: none;\n\n\t\t&:after {\n\t\t\tcontent: '';\n\t\t\tposition: absolute;\n\t\t\tdisplay: block;\n\t\t\tleft: 5px;\n\t\t\ttop: 5px;\n\t\t\twidth: 3px;\n\t\t\theight: 6px;\n\t\t\tborder: solid var(--backdrop);\n\t\t\tborder-width: 0 1px 1px 0;\n\t\t\ttransform: rotate(45deg);\n\t\t}\n\t}\n\n\t/* Indeterminate  */\n\t&:indeterminate {\n\t\tbackground-color: var(--accent);\n\t\tborder: none;\n\n\t\t&:after {\n\t\t\tcontent: '';\n\t\t\tposition: absolute;\n\t\t\tdisplay: block;\n\t\t\tborder: solid var(--backdrop);\n\t\t\tborder-width: 1px 0 0 0;\n\t\t\ttop: 9px;\n\t\t\tleft: 4px;\n\t\t\twidth: 6px;\n\t\t\theight: 1px;\n\t\t}\n\t}\n\n\t/* Error */\n\t&[aria-invalid='true'] {\n\t\tborder: 1px solid var(--accent);\n\t\tbackground-color: var(--backdrop);\n\n\t\t&:after {\n\t\t\tborder-color: var(--accent);\n\t\t}\n\t}\n\n\t/* Focus outline is only visible when user is using keyboard. This behavior matches native checkbox behavior */\n\t&:focus-visible {\n\t\t${outlineStyle}\n\t}\n`;\n\nexport const Label = styled.label`\n\tdisplay: grid;\n\tgrid-template-columns: min-content;\n\tgrid-auto-flow: column;\n\tgap: ${spacing(2)};\n\talign-items: center;\n\tfont-family: ${fontFamily('default')};\n\tmargin: 0;\n`;\n\nexport const Text = styled.span`\n\t${typography('description')};\n\tcolor: ${color('content.primary')};\n\tcursor: default;\n`;\n\nexport const MultiCheckboxContainer = styled.div`\n\twidth: 100%;\n`;\n\nexport const MultiCheckbox = styled.div`\n\tdisplay: grid;\n\tgap: ${spacing(3)};\n`;\n\nexport const MultiCheckboxErrorContainer = styled.div`\n\tpadding-top: ${spacing(3)};\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n`;\n","import { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Error = styled.div`\n\tfont-family: ${fontFamily('default')};\n\t${typography('message')}\n\n\tcolor: ${color('red.600')};\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\tgrid-template-columns: min-content auto;\n\talign-items: center;\n`;\n\nexport const IconContainer = styled.div`\n\talign-self: flex-start;\n\tfont-size: 16px;\n\tdisplay: flex;\n\talign-items: center;\n`;\n","import { css, styled, type StyledProps } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type SvgIconColor = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n\tcolor?: SvgIconColor;\n\tfill?: SvgIconColor;\n\tstroke?: SvgIconColor;\n\tsize?: string;\n};\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n\tcolor: 'inherit',\n\tfill: 'currentColor',\n\tstroke: undefined,\n};\n\nconst colorHelper = (\n\tcolorType: keyof typeof colorTypesDefaults,\n\tinputColor: SvgIconColor | undefined,\n\tprops: StyledProps<unknown>,\n) =>\n\tinputColor && !reservedKeywords.includes(inputColor)\n\t\t? color(inputColor as NamedColor)(props)\n\t\t: colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n\tpointer-events: all;\n\tbox-sizing: border-box;\n\tcolor: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n\tfill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n\tstroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n\tfont-size: ${(props) => props.size};\n`;\n\nconst commonExcludedProps = ['fill', 'color', 'stroke'];\nexport const SvgRoot = styled.svg.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n\twidth: 1em;\n\theight: 1em;\n`;\n\nexport const SvgIconPath = styled.path.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconRect = styled.rect.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconG = styled.g.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconCircle = styled.circle.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconLinearGradient = styled.linearGradient.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconDefs = styled.defs.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconStop = styled.stop.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconClipPath = styled.clipPath.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n","import { css } from '../styled';\nimport { color } from '../theme';\n\nexport const outlineStyle = css`\n\toutline-width: 2px !important;\n\toutline-style: solid !important;\n\toutline-color: ${color('primary.500')} !important;\n\toutline-color: -webkit-focus-ring-color !important;\n\toutline-offset: 1px !important;\n`;\n"],"names":[],"sourceRoot":""}