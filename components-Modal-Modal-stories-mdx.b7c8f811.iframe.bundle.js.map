{"version":3,"file":"components-Modal-Modal-stories-mdx.b7c8f811.iframe.bundle.js","mappings":";;;;AAsBA;;;AAGA;;AAIA;AACA;AACA;AACA;;;AAKA;AACA;;;AAGA;;AAIA;AACA;;;AAGA;;AAIA;;;;;;;;AAQA;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;;AAGA;;;;;AAKA;AA3EA;AAgFA;AA/EA;;AAmFA;AApFA;AAsFA;AApFA;;AAwFA;AA1FA;AA4FA;AAzFA;;AA6FA;;;ACzEA;AACA;AAIA;AAGA;AACA;AACA;AAEA;AAUA;AACA;AACA;;;;AAIA;AACA;AACA;;;;;;AAMA;AACA;;;;AAIA;AAGA;AACA;;AAGA;AAIA;AAEA;AACA;;;;AAIA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;AAIA;AACA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;AAKA;;;;;;;AAOA;;;AAGA;;AAEA;;AAEA;;AAGA;;;AAIA;;AAEA;AACA;;AAGA;;AAEA;AACA;;AAGA;;AAEA;;;;;AAMA;;;;;AAKA;AACA;AACA;;AAEA;;AAIA;;;;;;;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;;AAQA;;;;;;AAMA;;AAIA;;AAGA;;AAGA;;;AAMA;;;;;;;;;;;AChOA;AACA;;AAEA;;;;;;;;AAQA;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;AAIA;;;;AAIA;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;;;AAGA;AAGA;AACA;AAGA;AACA;AACA;AAGA;AACA;;;;;;AC1EA;AAGA;AACA;AACA;;;ACLA;;;;AAIA;AACA;;;;;;;AAOA;AACA;;;;;;AAMA;AACA;AACA;;;;;AAKA;;;;;;AAMA;;;AAGA;;;;;;AAMA;;;;;;;AAOA;;;;;;;;;AASA;AACA;;;;;;AAMA;AACA;;;;;;AAMA;;;;;AAKA;;;;;AAKA;;AC1EA;;;ACCA;;;;;;;AASA;;;;;;AAMA;AAGA;AACA;;;;;;;AASA;AACA;;AAIA;;;AAGA;;;AAGA;;;;;;;;;;AAeA;;;;;;;;;AASA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;AAMA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAIA;;;;;AAKA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA","sources":["webpack://@lokalise/louis/./src/components/Modal/styles.ts","webpack://@lokalise/louis/./src/components/Button/styles.ts","webpack://@lokalise/louis/./src/components/DatePicker/styles.ts","webpack://@lokalise/louis/./src/components/InlineDatePicker/DatePickerNav/styles.ts","webpack://@lokalise/louis/./src/components/InlineDatePicker/styles.ts","webpack://@lokalise/louis/./src/components/InlineDatePicker/BaseDatePicker.tsx","webpack://@lokalise/louis/./src/components/Toast/styles.ts"],"sourcesContent":["import { css, styled } from '../../utils/styled';\nimport { color, fontFamily, radius, spacing, typography, variants, zIndex } from '../../utils/theme';\nimport type { ModalProps } from './Modal';\n\nexport type ModalSize = 'small' | 'default' | 'wide';\n\nconst spacingOnLargeScreens = 7;\nconst spacingOnSmallScreens = 5;\nconst doublePadding = 24;\nconst smallWidth = 320;\nconst wideWidth = 840;\nconst defaultWidth = 640;\n\ntype DialogProps = {\n\tsize?: ModalSize;\n\toverflow?: ModalProps['overflow'];\n};\n\nexport const Header = styled.header`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: flex-start;\n\tpadding: ${spacing(spacingOnSmallScreens)};\n\n\t@media (min-width: 768px) {\n\t\tpadding: ${spacing(spacingOnLargeScreens)};\n\t}\n`;\n\nexport const Title = styled.h2`\n\tfont-family: ${fontFamily('default')};\n\t${typography('heading4')}\n\tcolor: ${color('content.primary')};\n\twidth: 100%;\n\tmargin: 0;\n`;\n\nexport const Section = styled.div`\n\tpadding: ${spacing(0, spacingOnSmallScreens, spacingOnSmallScreens, spacingOnSmallScreens)};\n\n\t@media (min-width: 768px) {\n\t\tpadding: ${spacing(0, spacingOnLargeScreens, spacingOnLargeScreens, spacingOnLargeScreens)};\n\t}\n`;\n\nexport const Actions = styled.div`\n\tpadding-top: ${spacing(6)};\n\n\t@media (min-width: 768px) {\n\t\tpadding-top: ${spacing(7)};\n\t}\n`;\n\nexport const DialogOverlay = styled.div`\n\tbackground: rgba(0, 0, 0, 0.5);\n\tposition: fixed;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tleft: 0;\n\toverflow: auto;\n\tz-index: ${zIndex('modal')};\n`;\n\nexport const StyledDialog = styled.dialog<DialogProps>`\n\tbackground-color: ${color('background.primary')};\n\tborder-radius: ${radius('md')};\n\tborder: none;\n\tbox-sizing: border-box;\n\tfont-family: ${fontFamily('default')};\n\t${typography('description')}\n\tcolor: ${color('content.primary')};\n\tmargin: revert; // ensure that browser can determine the correct margins to position the dialog\n\tmargin-top: ${spacing(3)};\n\tpadding: 0;\n\toverflow: ${({ overflow }) => overflow};\n\n\t@media (min-width: 768px) {\n\t\tmargin-top: ${spacing(7)};\n\t}\n\n\twidth: 100%;\n\n\t${variants(\n\t\t'size',\n\t\t{\n\t\t\tsmall: css`\n\t\t\t\tmax-width: calc(100% - ${doublePadding}px);\n\t\t\t\t@media (min-width: ${smallWidth + doublePadding}px) {\n\t\t\t\t\tmax-width: ${smallWidth}px;\n\t\t\t\t}\n\t\t\t`,\n\t\t\twide: css`\n\t\t\t\tmax-width: calc(100% - ${doublePadding}px);\n\t\t\t\t@media (min-width: ${wideWidth + doublePadding}px) {\n\t\t\t\t\tmax-width: ${wideWidth}px;\n\t\t\t\t}\n\t\t\t`,\n\t\t\tdefault: css`\n\t\t\t\tmax-width: calc(100% - ${doublePadding}px);\n\t\t\t\t@media (min-width: ${defaultWidth + doublePadding}px) {\n\t\t\t\t\tmax-width: ${defaultWidth}px;\n\t\t\t\t}\n\t\t\t`,\n\t\t},\n\t\t'default',\n\t)}\n`;\n","import { LoadingSignIcon } from '../../foundations/icons';\nimport { css, styled } from '../../utils/styled';\nimport { inputHeight, smallInputHeight } from '../../utils/styles';\nimport { color, fontFamily, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance, ButtonVariant, Size } from './Button';\n\ntype ButtonProps = {\n\tsize: Size;\n\tvariant: ButtonVariant;\n\tappearance: Appearance;\n\tactive: boolean;\n\tdisabled: boolean;\n\tisLoading: boolean;\n};\n\nconst appearanceToColorCode = (appearance: Appearance) => {\n\tconst colorCodes = {\n\t\tdefault: 'primary',\n\t\tprimary: 'primary',\n\t\tdanger: 'red',\n\t\twarning: 'yellow',\n\t} as const;\n\n\treturn colorCodes[appearance];\n};\n\nconst getOutlineStyles = (colorType: 'idle' | 'hover' | 'pressed', appearance: Appearance, transparent = false) => {\n\tif (appearance === 'default') {\n\t\treturn css`\n\t\t\tbackground-color: transparent;\n\t\t\tcolor: ${color('content.primary')};\n\t\t\tborder-color: ${color('content.primary')};\n\t\t`;\n\t}\n\n\tconst appearanceColorCode = appearanceToColorCode(appearance);\n\n\treturn css`\n\t\tbackground-color: ${transparent ? 'transparent' : color(`surface.${appearanceColorCode}50`)};\n\t\tborder-color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n\t\tcolor: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n\t`;\n};\n\nconst getColorStyles = (appearance: Appearance, colorCode: 'white' | 'black') => {\n\tif (appearance === 'default') {\n\t\treturn undefined;\n\t}\n\n\tconst appearanceColorCode = appearanceToColorCode(appearance);\n\n\treturn css`\n\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n\t\tborder-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n\t\tcolor: ${color(`content.${colorCode}`)};\n\n\t\t// hover\n\t\t&:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n\t\t\tcolor: ${color(`content.${colorCode}`)};\n\t\t}\n\n\t\t// pressed\n\t\t&:active:not([disabled]):not([aria-expanded='true']),\n\t\t&:focus:active:not([disabled]):not([aria-expanded='true']) {\n\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t}\n\n\t\t// activated\n\t\t${modifier(\n\t\t\t'active',\n\t\t\tcss`\n\t\t\t\tbackground-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\t\tborder-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n\t\t\t`,\n\t\t)}\n\t`;\n};\n\nconst variantColorStyles = css`\n\t${variants('appearance', {\n\t\tdefault: css<ButtonProps>`\n\t\t\tbackground-color: ${color(`content.white`)};\n\t\t\tcolor: ${color('primary.400')};\n\t\t\tborder-color: transparent;\n\n\t\t\t&:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\tcolor: ${color('primary.500')};\n\t\t\t}\n\t\t`,\n\t\tprimary: css<ButtonProps>`\n\t\t\t${getColorStyles('primary', 'white')}\n\t\t`,\n\t\twarning: css<ButtonProps>`\n\t\t\t${getColorStyles('warning', 'black')}\n\t\t`,\n\t\tdanger: css<ButtonProps>`\n\t\t\t${getColorStyles('danger', 'white')}\n\t\t`,\n\t})}\n\n\t${variants('variant', {\n\t\tsolid: css``,\n\t\toutline: css<ButtonProps>`\n\t\t\tborder-width: 1px;\n\t\t\t${({ appearance }) => css`\n\t\t\t\t${getOutlineStyles('idle', appearance, true)}\n\n\t\t\t\t// hover\n                &:hover:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\t\t${getOutlineStyles('hover', appearance, true)}\n\t\t\t\t}\n\n\t\t\t\t// pressed\n\t\t\t\t&:active:not([disabled]):not([aria-expanded='true']),\n\t\t\t\t&:focus:active:not([disabled]):not([aria-expanded='true']) {\n\t\t\t\t\t${getOutlineStyles('pressed', appearance)}\n\t\t\t\t}\n\n\t\t\t\t// activated\n\t\t\t\t${modifier('active', getOutlineStyles('pressed', appearance))}\n\t\t\t`}\n\t\t`,\n\t})}\n`;\n\nexport const Container = styled(Pressable)<ButtonProps>`\n\tdisplay: inline-flex;\n\talign-items: center;\n\tbackground-color: transparent;\n\tborder: 1px solid transparent;\n\ttext-decoration: none;\n\tvertical-align: middle;\n\tborder-radius: ${radius('md')};\n\tcursor: pointer;\n\tposition: relative;\n\ttransition: all ${transitionTime()};\n\tbox-sizing: border-box;\n\tfont-family: ${fontFamily('default')};\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\tfont-size: 11px;\n\t\t\tpadding: ${spacing(0, 2)};\n\t\t\theight: 20px;\n\t\t\tline-height: 12px;\n\t\t`,\n\t\tsm: css`\n\t\t\tfont-size: 12px;\n\t\t\tpadding: ${spacing(0, 3)};\n\t\t\theight: ${smallInputHeight}px;\n\t\t\tline-height: 12px;\n\t\t`,\n\t\tmd: css`\n\t\t\tfont-size: 14px;\n\t\t\tpadding: ${spacing(0, 3)};\n\t\t\theight: ${inputHeight}px;\n\t\t\tline-height: 14px;\n\t\t`,\n\t\tlg: css`\n\t\t\tfont-size: 18px;\n\t\t\tpadding: ${spacing(0, 4)};\n\t\t\theight: 45px;\n\t\t\tline-height: 18px;\n\t\t`,\n\t})}\n\n\t${variantColorStyles}\n\n    // disabled\n    &:disabled {\n\t\tcursor: not-allowed;\n\t\tbackground-color: ${color('surface.secondary')};\n\t\tcolor: ${color('content.disabled')};\n\t\tborder-color: ${color('content.disabled')};\n\n\t\t${modifier('isLoading', variantColorStyles)}\n\t}\n`;\n\nexport const Content = styled.span<{ isHidden: boolean; size: Size }>`\n\tdisplay: flex;\n\tflex-flow: row nowrap;\n\talign-items: center;\n\tjustify-content: center;\n\twidth: 100%;\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\tgap: ${spacing(1)};\n\t\t`,\n\t\tsm: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t\tmd: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t\tlg: css`\n\t\t\tgap: ${spacing(2)};\n\t\t`,\n\t})}\n\n\t${modifier(\n\t\t'isHidden',\n\t\tcss`\n\t\t\topacity: 0;\n\t\t`,\n\t)}\n`;\n\nexport const Text = styled.span<{ size: Size }>`\n\tposition: relative;\n\talign-items: center;\n\tdisplay: inline-flex;\n\twhite-space: nowrap;\n\n\t${variants('size', {\n\t\txs: css`\n\t\t\ttop: 0;\n\t\t`,\n\t\tsm: css`\n\t\t\ttop: -1px; // Make text visually centered\n\t\t`,\n\t\tmd: css`\n\t\t\ttop: 0;\n\t\t`,\n\t\tlg: css`\n\t\t\ttop: -1px; // Make text visually centered\n\t\t`,\n\t})}\n`;\n\nexport const StyledLoadingSign = styled(LoadingSignIcon)`\n\tfont-size: 1.3em;\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n`;\n","import { css, styled } from '../../utils/styled';\nimport { inputHeight } from '../../utils/styles';\nimport { color, radius, spacing, transitionTime, typography } from '../../utils/theme';\n\nexport const Container = styled.div`\n\tposition: relative;\n\twidth: 100%;\n\tdisplay: grid;\n\tgap: 4px;\n`;\n\nexport const IconWrapper = styled.div`\n\tbackground-color: ${color('background.secondary')};\n\twidth: 36px;\n\tborder-left: 1px solid ${color('border.primary')};\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tposition: absolute;\n\tright: 0;\n\theight: 100%;\n\ttop: 0;\n\ttransition: border-color ${transitionTime()}, background-color ${transitionTime()}, color ${transitionTime()};\n`;\n\ntype DateBoxProps = {\n\topened: boolean;\n};\n\nexport const DateBox = styled.button<DateBoxProps>`\n\t${typography('description')};\n\tborder: 1px solid ${color('border.primary')};\n\theight: ${inputHeight}px;\n\twidth: fit-content;\n\tcolor: ${color('content.primary')};\n\tpadding: ${spacing(1, 3)};\n\tpadding-right: ${spacing(8)};\n\tborder-radius: ${radius('md')};\n\toverflow: hidden;\n\tbackground-color: ${color('background.primary')};\n\tposition: relative;\n\talign-items: center;\n\ttext-align: left;\n\ttransition: border-color ${transitionTime()};\n\tcursor: pointer;\n\n\t// condition to avoid hover over writing style whe opened\n\t${({ opened }) =>\n\t\topened\n\t\t\t? css`\n\t\t\t\t\tborder-color: ${color('primary.500')};\n\n\t\t\t\t\t${IconWrapper} {\n\t\t\t\t\t\tborder-color: ${color('primary.500')};\n\t\t\t\t\t\tbackground-color: ${color('primary.500')};\n\t\t\t\t\t\tcolor: ${color('content.white')};\n\t\t\t\t\t}\n\t\t\t  `\n\t\t\t: css`\n\t\t\t\t\t&:hover {\n\t\t\t\t\t\tborder-color: ${color('primary.300')};\n\n\t\t\t\t\t\t${IconWrapper} {\n\t\t\t\t\t\t\tborder-color: ${color('primary.300')};\n\t\t\t\t\t\t\tbackground-color: ${color('primary.200')};\n\t\t\t\t\t\t\tcolor: ${color('primary.500')};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t  `}\n`;\n\nexport const DrawerContent = styled.div`\n\tmargin: ${spacing(4)};\n`;\n\nexport const Placeholder = styled.span`\n\t${typography('description')}\n\tcolor: ${color('content.secondary')};\n`;\n\nexport const DateBoxLabel = styled.span`\n\tpadding-right: ${spacing(2)};\n\twhite-space: nowrap;\n`;\n","import { styled } from '../../../utils/styled';\nimport { color, spacing, typography } from '../../../utils/theme';\n\nexport const Wrapper = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tpadding: ${spacing(0, 1, 2, 1)};\n`;\n\nexport const Title = styled.div`\n\t${typography('descriptionMedium')};\n\tcolor: ${color('content.primary')};\n\tcursor: default;\n`;\n","import 'react-day-picker/dist/style.css';\nimport { DayPicker } from 'react-day-picker';\n\nimport { styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography } from '../../utils/theme';\n\nexport const StyledDatePicker = styled(DayPicker)`\n\tfont-family: ${fontFamily('default')};\n\n\t&.rdp {\n\t\t--rdp-cell-size: 36px;\n\t\t--rdp-accent-color: ${color('interactive.primary.idle')}; // selected day\n\t\t--rdp-background-color: ${color('surface.primary50')};\n\t\tmargin: 0;\n\t}\n\n\t// days of the week\n\t.rdp-head_cell {\n\t\ttext-transform: capitalize;\n\t\t${typography('caption2')};\n\t\tcolor: ${color('content.secondary')};\n\t\tcursor: default;\n\t}\n\n\t// days in the currently viewed month\n\t.rdp-day {\n\t\t${typography('captionMedium')};\n\t\tborder-radius: ${radius('md')};\n\t\tcolor: ${color('content.primary')};\n\t}\n\n\t// days outside the currently viewed month\n\t.rdp-day_outside {\n\t\tcolor: ${color('content.secondary')};\n\t}\n\n\t// selected day\n\t.rdp-day_selected:not(.rdp-day_disabled) {\n\t\t&:not(.rdp-day_range_middle) {\n\t\t\tcolor: ${color('content.white')};\n\t\t}\n\t\t&:hover {\n\t\t\tbackground-color: ${color('surface.primary50')};\n\t\t}\n\t}\n\n\t// today\n\t.rdp-day_today:not(.rdp-day_selected) {\n\t\tcolor: ${color('interactive.primary.idle')};\n\t}\n\n\t// disabled days\n\t.rdp-day_disabled,\n\t.rdp-button[disabled]:not(.rdp-day_selected) {\n\t\tbackground-color: inherit;\n\t\tcolor: ${color('content.disabled')};\n\t\tcursor: not-allowed;\n\t\topacity: 1;\n\t}\n\n\t/* Classes for date range selections */\n\n\t// days between selected start and end date\n\t.rdp-day_range_middle {\n\t\tbackground-color: ${color('surface.primary50')};\n\t\tcolor: ${color('content.primary')};\n\t\tborder-radius: 0;\n\t}\n\n\t// days between selected start and end date, before selecting an end date\n\t.rdp-range_entered:not(.rdp-day_range_start):not(.rdp-day_range_end) {\n\t\tbackground-color: ${color('surface.primary50')};\n\t\tcolor: ${color('content.primary')};\n\t\tborder-radius: 0;\n\t}\n\n\t// start date\n\t.rdp-day_range_start {\n\t\tborder-radius: ${radius('md')} 0 0 ${radius('md')};\n\t}\n\n\t// end date\n\t.rdp-day_range_end:not(.rdp-range_first_day) {\n\t\tborder-radius: 0 ${radius('md')} ${radius('md')} 0;\n\t}\n\n\t// start and end date on the same date\n\t.rdp-day_range_start.rdp-day_range_end:not(.rdp-range_first_day) {\n\t\tborder-radius: ${radius('md')};\n\t}\n`;\n","import React from 'react';\nimport type { DayPickerRangeProps, DayPickerSingleProps } from 'react-day-picker';\n\nimport { useLocalisation } from '../../utils/hooks';\nimport { DatePickerNav } from './DatePickerNav';\nimport { StyledDatePicker } from './styles';\n\ntype OmittedProps = 'weekStartsOn' | 'showOutsideDays' | 'defaultMonth' | 'components';\ntype SelectionModes = 'range' | 'single';\n\nexport type BaseDatePickerProps<SelectionMode extends SelectionModes> = SelectionMode extends 'range'\n\t? Omit<DayPickerRangeProps, OmittedProps>\n\t: Omit<DayPickerSingleProps, OmittedProps>;\n\nexport const BaseDatePicker = <SelectionMode extends SelectionModes>({\n\t...props\n}: BaseDatePickerProps<SelectionMode>) => {\n\tconst { firstDayOfWeek } = useLocalisation();\n\n\tconst currentMonth = props.mode === 'single' ? props.selected : props.selected?.from;\n\n\treturn (\n\t\t<StyledDatePicker\n\t\t\tweekStartsOn={firstDayOfWeek as DayPickerSingleProps['weekStartsOn']}\n\t\t\tshowOutsideDays\n\t\t\tdefaultMonth={currentMonth}\n\t\t\tcomponents={{\n\t\t\t\tCaption: DatePickerNav,\n\t\t\t}}\n\t\t\t{...props}\n\t\t/>\n\t);\n};\n","import { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, modifier, radius, spacing, transitionTime, typography, zIndex } from '../../utils/theme';\nimport { IconButton } from '../IconButton';\nimport type { IconButtonProps } from '../IconButton';\nimport type { PressableProps } from '../Pressable';\nimport { Pressable } from '../Pressable';\n\nexport const CloseIconButton = styled(IconButton)<IconButtonProps>`\n\topacity: 0;\n\ttransition: opacity 0.2s;\n`;\n\nexport const TypeIcon = styled.div`\n\tflex-basis: 16px;\n\tflex-shrink: 0;\n\tflex-grow: 0;\n\theight: 20px;\n\tdisplay: flex;\n\talign-items: center;\n`;\n\nexport const Content = styled.div`\n\twidth: 100%;\n\tflex-shrink: 1;\n\tflex-grow: 1;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgap: ${spacing(1)};\n`;\n\nexport const Title = styled.span`\n\t${typography('captionMedium')};\n\tdisplay: -webkit-box;\n\ttext-overflow: ellipsis;\n\t-webkit-line-clamp: 2;\n\t-webkit-box-orient: vertical;\n\tword-break: break-word;\n\toverflow: hidden;\n`;\n\nexport const Description = styled.span`\n\t${typography('caption2')};\n\tdisplay: block;\n`;\n\nexport const ToastAnchor = styled(Pressable)<PressableProps>`\n\ttext-decoration: underline;\n\tcursor: pointer;\n\ttransition: opacity ${transitionTime()};\n\tfont-weight: inherit;\n\n\t${modifier(\n\t\t({ href }: PressableProps) => !href,\n\t\tcss`\n\t\t\tbackground-color: transparent;\n\t\t\tborder: none;\n\t\t\tfont-family: inherit;\n\t\t\tpadding: 0;\n\t\t`,\n\t)}\n\n\t&:hover {\n\t\topacity: 0.7;\n\t}\n`;\n\nexport const StyledToastContainer = styled(ToastContainer)`\n\ttransform: translate3d(0, 0, 9999px);\n\tposition: fixed;\n\tfont-family: inherit;\n\twidth: 332px;\n\tmin-height: 44px;\n\tbox-sizing: border-box;\n\tpadding: 0;\n\n\t--toastify-color-light: ${color('content.primary')};\n\t--toastify-color-dark: var(--toastify-color-light);\n\t--toastify-color-info: ${color('surface.primary50')};\n\t--toastify-color-success: ${color('surface.green50')};\n\t--toastify-color-warning: ${color('surface.yellow50')};\n\t--toastify-color-error: ${color('surface.red50')};\n\t//--toastify-color-transparent: rgba(255, 255, 255, 0.7);\n\n\t--toastify-icon-color-info: ${color('primary.600')};\n\t--toastify-icon-color-success: ${color('green.600')};\n\t--toastify-icon-color-warning: ${color('yellow.800')};\n\t--toastify-icon-color-error: ${color('red.600')};\n\n\t//--toastify-toast-width: 320px;\n\t//--toastify-toast-background: #fff;\n\t//--toastify-toast-min-height: 64px;\n\t//--toastify-toast-max-height: 800px;\n\t--toastify-font-family: ${fontFamily('default')};\n\t--toastify-z-index: ${zIndex('toast')};\n\n\t--toastify-text-color-light: ${color('content.primary')};\n\t--toastify-text-color-dark: var(--toastify-text-color-light);\n\n\t--toastify-text-color-info: var(--toastify-text-color-light);\n\t--toastify-text-color-success: var(--toastify-text-color-light);\n\t--toastify-text-color-warning: var(--toastify-text-color-light);\n\t--toastify-text-color-error: var(--toastify-text-color-light);\n\n\t//--toastify-spinner-color: #616161;\n\t//--toastify-spinner-color-empty-area: #e0e0e0;\n\n\t// Used when no type is provided\n\t// toast(\"**hello**\")\n\t//--toastify-color-progress-light: linear-gradient(to right, #4cd964, #5ac8fa, #007aff, #34aadc, #5856d6, #ff2d55);\n\t// Used when no type is provided\n\t--toastify-color-progress-dark: var(--toastify-color-progress-light);\n\t--toastify-color-progress-info: var(--toastify-icon-color-info);\n\t--toastify-color-progress-success: var(--toastify-icon-color-success);\n\t--toastify-color-progress-warning: var(--toastify-icon-color-warning);\n\t--toastify-color-progress-error: var(--toastify-icon-color-error);\n\n\t.Toastify__toast {\n\t\tbox-sizing: border-box;\n\t\tpadding: ${spacing(4, 2)};\n\t\twidth: 100%;\n\t\tdisplay: flex;\n\t\talign-items: flex-start;\n\t\tcolor: ${color('content.primary')};\n\t\tbox-shadow: none;\n\t\tcursor: default;\n\t\tmin-height: 44px;\n\t\toverflow: hidden;\n\t\tborder-radius: ${radius('md')};\n\t\tmargin-bottom: ${spacing(2)};\n\n\t\t&:hover ${CloseIconButton} {\n\t\t\topacity: 1;\n\t\t}\n\t}\n\n\t.Toastify__toast-icon {\n\t\tmargin: 0;\n\t}\n\n\t.Toastify__toast.Toastify__toast--success {\n\t\tbackground-color: var(--toastify-color-success);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-success);\n\t\t}\n\t}\n\n\t.Toastify__toast.Toastify__toast--error {\n\t\tbackground-color: var(--toastify-color-error);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-error);\n\t\t}\n\t}\n\n\t.Toastify__toast.Toastify__toast--warning {\n\t\tbackground-color: var(--toastify-color-warning);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-warning);\n\t\t}\n\t}\n\n\t.Toastify__toast.Toastify__toast--info {\n\t\tbackground-color: var(--toastify-color-info);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-info);\n\t\t}\n\t}\n\n\t.Toastify__toast-body {\n\t\twidth: 100%;\n\t\tdisplay: flex;\n\t\talign-items: flex-start;\n\t\tgap: ${spacing(2)};\n\t\tpadding: 0;\n\t}\n`;\n"],"names":[],"sourceRoot":""}