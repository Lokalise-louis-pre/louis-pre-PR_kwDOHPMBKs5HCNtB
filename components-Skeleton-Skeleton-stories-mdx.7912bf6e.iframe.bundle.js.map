{"version":3,"file":"components-Skeleton-Skeleton-stories-mdx.7912bf6e.iframe.bundle.js","mappings":";;;;;;;;;;AAeA;;AAEA;AAGA;;;;;ACMA;AACA;;AAEA;AAGA;ACXA;AACA;AACA;AACA;AACA;;;AAQA;;ACZA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@lokalise/louis/./src/components/Skeleton/styles.ts","webpack://@lokalise/louis/./src/components/Skeleton/Circle.tsx","webpack://@lokalise/louis/./src/components/Skeleton/Rectangle.tsx","webpack://@lokalise/louis/./src/components/Flex/styles.ts"],"sourcesContent":["import { css, keyframes, styled } from '../../utils/styled';\nimport { modifier } from '../../utils/theme';\n\nconst LoadingAnimation = keyframes`\n    0% {\n        opacity: .3;\n    }\n    50% {\n        opacity: 1;\n    }\n    100% {\n        opacity: .3;\n    }\n`;\n\nexport const Container = styled.div<{ animated: boolean }>`\n\twidth: 100%;\n\t${modifier(\n\t\t'animated',\n\t\tcss`\n\t\t\tanimation-name: ${LoadingAnimation};\n\t\t\tanimation-duration: 1.5s;\n\t\t\tanimation-iteration-count: infinite;\n\t\t`,\n\t)}\n`;\n","import { styled } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\nexport type CircleProps =\n\t| {\n\t\t\t/**\n\t\t\t * @deprecated in favour of `size`.\n\t\t\t */\n\t\t\tradius: number;\n\t\t\tsize?: never;\n\t  }\n\t| {\n\t\t\t/**\n\t\t\t * Sets the height and width of the circle.\n\t\t\t */\n\t\t\tsize: number;\n\t\t\t/**\n\t\t\t * **Deprecated:** use size instead.\n\t\t\t * @deprecated in favour of `size`.\n\t\t\t */\n\t\t\tradius?: never;\n\t  };\n\nexport const Circle = styled.div.withConfig<CircleProps>({\n\tshouldForwardProp: excludeProps(['radius', 'size']),\n})`\n\theight: ${({ radius = 0, size = radius * 2 }) => size}px;\n\twidth: ${({ radius = 0, size = radius * 2 }) => size}px;\n\tborder-radius: 50%;\n\tbackground-color: ${color('content.disabled')};\n`;\n\nCircle.displayName = 'Circle';\n","import { css, styled } from '../../utils/styled';\nimport { color, excludeProps, modifier, radius } from '../../utils/theme';\n\nexport type RectangleProps = {\n\t/**\n\t * Center the Rectangle\n\t * */\n\tcentered?: boolean;\n\t/**\n\t * Set the height of Rectangle.\n\t * */\n\theight: number;\n\t/**\n\t * Set the width of Rectangle. Can use percentage value.\n\t * */\n\twidth: number | string;\n};\n\nexport const Rectangle = styled.div.withConfig<RectangleProps>({\n\tshouldForwardProp: excludeProps(['height', 'width', 'centered']),\n})`\n\theight: ${({ height }) => height}px;\n\twidth: ${({ width }) => (typeof width === 'string' ? width : `${width}px`)};\n\tborder-radius: ${radius('md')};\n\tbackground-color: ${color('content.disabled')};\n\t${modifier(\n\t\t'centered',\n\t\tcss`\n\t\t\tmargin: 0 auto;\n\t\t`,\n\t)};\n`;\n\nRectangle.displayName = 'Rectangle';\n","import type { SpacingLevels } from '../../foundations/designTokens';\nimport type { CSSProperties } from '../../utils/styled';\nimport { css, styled } from '../../utils/styled';\nimport { modifier, spacing } from '../../utils/theme';\n\ntype ContainerProps = {\n\talignItems: CSSProperties['alignItems'];\n\tjustifyContent: CSSProperties['justifyContent'];\n\tflexWrap: CSSProperties['flexWrap'];\n\tflexDirection: CSSProperties['flexDirection'];\n\tbasis?: CSSProperties['flexBasis'];\n\tgrow?: CSSProperties['flexGrow'];\n\tshrink?: CSSProperties['flexShrink'];\n\talignSelf?: CSSProperties['alignSelf'];\n\trowGap: SpacingLevels;\n\tcolumnGap: SpacingLevels;\n\tinline: boolean;\n};\n\nexport const Container = styled.div<ContainerProps>`\n\tdisplay: flex;\n\tgap: ${({ rowGap }) => spacing(rowGap)} ${({ columnGap }) => spacing(columnGap)};\n\tmax-width: 100%;\n\talign-items: ${({ alignItems }) => alignItems};\n\tjustify-content: ${({ justifyContent }) => justifyContent};\n\tflex-wrap: ${({ flexWrap }) => flexWrap};\n\tflex-direction: ${({ flexDirection }) => flexDirection};\n\tflex-basis: ${({ basis }) => basis};\n\tflex-grow: ${({ grow }) => grow};\n\tflex-shrink: ${({ shrink }) => shrink};\n\talign-self: ${({ alignSelf }) => alignSelf};\n\t${modifier(\n\t\t'inline',\n\t\tcss`\n\t\t\tdisplay: inline-flex;\n\t\t`,\n\t)}\n`;\n"],"names":[],"sourceRoot":""}