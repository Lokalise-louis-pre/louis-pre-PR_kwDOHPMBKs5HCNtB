{"version":3,"file":"components-Tabs-Tabs-stories-mdx.4f94fe82.iframe.bundle.js","mappings":";;;AAMA;AAGA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;AACA;;;;;;;;;;;AAaA;AACA;ACnCA","sources":["webpack://@lokalise/louis/./src/components/Tabs/styles.ts","webpack://@lokalise/louis/./src/components/Tabs/TabList.tsx"],"sourcesContent":["import { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing, transitionTime, typography } from '../../utils/theme';\n\nexport const StyledTabList = styled.div`\n\tdisplay: flex;\n\tbackground: none;\n\tborder-bottom: 1px solid ${color('border.primary')};\n`;\n\nexport const StyledTab = styled.button`\n\tdisplay: inline-block;\n\tborder: none;\n\tborder-bottom: 2px solid transparent;\n\tmargin: 0;\n\t// compensate for border so it overflows tablist border\n\tmargin-bottom: -1px;\n\tbackground: none;\n\tcursor: pointer;\n\t-webkit-appearance: none;\n\t-moz-appearance: none;\n\tfont-family: ${fontFamily('default')};\n\t${typography('description')}\n\tpadding: ${spacing(2, 0)};\n\tcolor: ${color('content.primary')};\n\ttransition: color ${transitionTime()};\n\n\t&:hover:enabled {\n\t\tcolor: ${color('primary.500')};\n\t}\n\n\t& + & {\n\t\tmargin-left: ${spacing(6)};\n\t}\n\n\t&[aria-selected='true'] {\n\t\t${typography('descriptionMedium')}\n\t\tborder-bottom-color: ${color('primary.500')};\n\t\tcolor: ${color('primary.500')};\n\t}\n\n\t&:active {\n\t\tbackground: none;\n\t}\n\n\t&:disabled {\n\t\topacity: 0.25;\n\t\tcursor: default;\n\t}\n`;\n\nexport const StyledTabPanel = styled.div`\n\tfont-family: ${fontFamily('default')};\n`;\n","import React, { forwardRef, useContext, useLayoutEffect } from 'react';\nimport type { HTMLAttributes, ReactNode } from 'react';\n\nimport { useTabsContext } from './context/useTabsContext';\nimport { TabsDescendantsContext } from './descendants/tabsDescendantsContext';\nimport { useDescendantKeyDown } from './descendants/useDescendantsKeyDown';\nimport { StyledTabList } from './styles';\n\nexport type TabListProps = {\n\t/**\n\t * Renders text content and / or any HTML node inside. Expects multiple `Tab` components as children.\n\t * */\n\tchildren?: ReactNode;\n} & ({ ariaLabelledBy?: string; ariaLabel?: never } | { ariaLabel?: string; ariaLabelledBy?: never }) &\n\tHTMLAttributes<HTMLDivElement>;\n\nexport const TabList = forwardRef<HTMLDivElement, TabListProps>(\n\t({ ariaLabelledBy, ariaLabel, children, ...props }, ref) => {\n\t\tconst { isControlled, onSelectTabWithKeyboard, selectedIndex, setSelectedIndex } = useTabsContext();\n\t\tconst tabs = useContext(TabsDescendantsContext).descendants;\n\n\t\tconst handleKeyDown = useDescendantKeyDown(TabsDescendantsContext, {\n\t\t\tcurrentIndex: selectedIndex,\n\t\t\tcallback: onSelectTabWithKeyboard,\n\t\t\tfilter: (tab) => !tab.disabled,\n\t\t});\n\n\t\tuseLayoutEffect(() => {\n\t\t\t// In the event an uncontrolled component's selected index is disabled,\n\t\t\t// (this should only happen if the first tab is disabled and no default\n\t\t\t// index is set), we need to override the selection to the next selectable\n\t\t\t// index value.\n\t\t\tif (!isControlled && tabs[selectedIndex]?.disabled) {\n\t\t\t\tconst next = tabs.find((tab) => !tab.disabled);\n\t\t\t\tif (next) {\n\t\t\t\t\tsetSelectedIndex(next.index);\n\t\t\t\t}\n\t\t\t}\n\t\t}, [tabs, isControlled, selectedIndex, setSelectedIndex]);\n\n\t\treturn (\n\t\t\t<StyledTabList\n\t\t\t\t// The element that serves as the container for\n\t\t\t\t// the set of tabs has role tablist.\n\t\t\t\t// https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/\n\t\t\t\trole=\"tablist\"\n\t\t\t\t// If the tab list has a visible label, the element\n\t\t\t\t// with role tablist has aria-labelledby set to a value\n\t\t\t\t// that refers to the labelling element. Otherwise,\n\t\t\t\t// the tablist element has a label provided by aria-label.\n\t\t\t\t// https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/\n\t\t\t\taria-labelledby={ariaLabelledBy}\n\t\t\t\taria-label={!ariaLabelledBy ? ariaLabel : undefined}\n\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\tref={ref}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</StyledTabList>\n\t\t);\n\t},\n);\n\nTabList.displayName = 'TabList';\n"],"names":[],"sourceRoot":""}