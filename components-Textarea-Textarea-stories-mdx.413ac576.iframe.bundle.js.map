{"version":3,"file":"components-Textarea-Textarea-stories-mdx.413ac576.iframe.bundle.js","mappings":";AAMA;AACA;;AAIA;;;AAGA;;;ACVA;AACA;;AAEA;;AAEA;;;AAKA;;;;;;;;ACmBA;AACA;AACA;AACA;AAGA;AAIA;;;AAKA;AAGA;AAGA;AAGA;AAGA;AAGA;AAeA;AATA;AAGA;AAGA;AAGA;AAGA;AASA;AAHA;AAGA;AAGA;;ACxFA;AAGA;AAGA;AACA;AACA;;;;AAIA;;;;;AAKA;;;;AAIA;;AAIA;AACA;;;AAGA;;AASA;;;AAGA;;;AAGA;AACA;AACA;;AAEA;AACA;;;;;;;;AAQA;;;;;AAKA;;;AAGA;AACA;AAGA;;;;AAIA;AACA;AACA;;;;;;;;;;AAUA;AACA;;;AAGA;AACA;AAGA;AACA;AACA;;;;;AAKA;AAYA;AAUA;AACA;AACA;AACA;;;AAGA;;;;AAIA;;AAGA;AACA;AACA;AACA;;;AAGA;;AAhCA","sources":["webpack://@lokalise/louis/./src/components/Textarea/styles.ts","webpack://@lokalise/louis/./src/components/InputErrorMessage/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/utils/styles/inputStyle.ts"],"sourcesContent":["import { styled } from '../../utils/styled';\nimport type { InputStyleProps } from '../../utils/styles';\nimport { withInputStyle } from '../../utils/styles';\nimport { spacing } from '../../utils/theme';\n\nexport const Textarea = styled.textarea<InputStyleProps>`\n\t${withInputStyle};\n\tpadding: ${spacing(3)};\n\tmax-width: 100%;\n`;\n\nexport const Container = styled.div`\n\twidth: 100%;\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\tgrid-template-columns: minmax(50px, 1fr); /* This ensures Textarea doesn't overflow 100% */\n`;\n","import { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Error = styled.div`\n\tfont-family: ${fontFamily('default')};\n\t${typography('message')}\n\n\tcolor: ${color('red.600')};\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\tgrid-template-columns: min-content auto;\n\talign-items: center;\n`;\n\nexport const IconContainer = styled.div`\n\talign-self: flex-start;\n\tfont-size: 16px;\n\tdisplay: flex;\n\talign-items: center;\n`;\n","import { css, styled, type StyledProps } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type SvgIconColor = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n\tcolor?: SvgIconColor;\n\tfill?: SvgIconColor;\n\tstroke?: SvgIconColor;\n\tsize?: string;\n};\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n\tcolor: 'inherit',\n\tfill: 'currentColor',\n\tstroke: undefined,\n};\n\nconst colorHelper = (\n\tcolorType: keyof typeof colorTypesDefaults,\n\tinputColor: SvgIconColor | undefined,\n\tprops: StyledProps<unknown>,\n) =>\n\tinputColor && !reservedKeywords.includes(inputColor)\n\t\t? color(inputColor as NamedColor)(props)\n\t\t: colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n\tpointer-events: all;\n\tbox-sizing: border-box;\n\tcolor: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n\tfill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n\tstroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n\tfont-size: ${(props) => props.size};\n`;\n\nconst commonExcludedProps = ['fill', 'color', 'stroke'];\nexport const SvgRoot = styled.svg.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n\twidth: 1em;\n\theight: 1em;\n`;\n\nexport const SvgIconPath = styled.path.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconRect = styled.rect.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconG = styled.g.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconCircle = styled.circle.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconLinearGradient = styled.linearGradient.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconDefs = styled.defs.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconStop = styled.stop.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconClipPath = styled.clipPath.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n","import type { CssDeclaration } from '../styled';\nimport { css } from '../styled';\nimport { color, fontFamily, modifier, radius, spacing, typography, variants } from '../theme';\n\nexport const withInputErrorStyle = css`\n\tborder-color: ${color('red.600')};\n`;\n\nexport const withInputErrorModifier = modifier('error', withInputErrorStyle);\n\nexport const withInputDisabledStyle = css`\n\tcolor: ${color('content.disabled')};\n\tbackground-color: ${color('surface.secondary')};\n\tborder-color: ${color('border.primary')};\n\n\t&:hover,\n\t[data-dev-state='hover'] & {\n\t\tborder-color: ${color('border.primary')};\n\t}\n\n\t&:focus,\n\t[data-dev-state='focus'] & {\n\t\tborder-color: ${color('border.primary')};\n\t}\n\n\t&::placeholder {\n\t\tcolor: ${color('content.disabled')};\n\t}\n`;\n\nexport const withInputDisabledModifier = css`\n\t${modifier('disabled', withInputDisabledStyle)}\n\n\t&:disabled {\n\t\t${withInputDisabledStyle}\n\t}\n`;\n\nexport interface InputStyleProps {\n\terror?: boolean;\n\tdisabled?: boolean;\n}\n\nexport const withInputContainerStyle = css<InputStyleProps>`\n\tbox-sizing: border-box;\n\n\t${typography('description')};\n\n\twidth: 100%;\n\tcolor: ${color('content.primary')};\n\tborder: 1px solid ${color('border.primary')};\n\tborder-radius: ${radius('md')};\n\ttransition: border-color ease-in-out 0.15s;\n\tpadding: ${spacing(2, 3)};\n\tbackground-color: ${color('background.input')};\n\n\t@media (prefers-reduced-motion: reduce) {\n\t\ttransition: none;\n\t}\n\n\t&:hover,\n\t[data-dev-state='hover'] & {\n\t\tborder-color: ${color('primary.300')};\n\t}\n\n\t&:focus-within,\n\t[data-dev-state='focus'] & {\n\t\tborder-color: ${color('primary.500')};\n\t}\n\n\t${withInputErrorModifier}\n\t${withInputDisabledModifier}\n`;\n\nexport const withInputFieldStyle = css<InputStyleProps>`\n\tbox-sizing: content-box;\n\t-webkit-font-smoothing: subpixel-antialiased;\n\n\tfont-family: ${fontFamily('default')};\n\t${typography('description')};\n\tcolor: ${color('content.primary')};\n\tbackground: none;\n\n\t&&&:focus,\n\t&&&:focus-visible,\n\t[data-dev-state='focus'] &&& {\n\t\toutline: none !important;\n\t}\n\n\t&::placeholder {\n\t\t${typography('description')};\n\t\tcolor: ${color('content.secondary')};\n\t}\n\n\t${withInputErrorModifier}\n\t${withInputDisabledModifier}\n`;\n\nexport const withInputStyle = css<InputStyleProps>`\n\t${withInputContainerStyle};\n\t${withInputFieldStyle};\n\n\t// Unfortunately, we need order of container -> input, but we need certain props from container\n\t// so we override those here. Currently I don't see way to combine those styles cleaner.\n\tbox-sizing: border-box;\n\tbackground: ${color('background.input')};\n`;\n\nexport type InputSizeVariants = 'small' | 'default';\n\n/**\n * This helper allows us to define custom styles for inputs in a way that allows size names, defaults and ensuring\n * that all required sizes are defined.\n */\nexport const buildInputSizeStyles = <T extends object>(sizeStyles: Record<InputSizeVariants, CssDeclaration<T>>) =>\n\tvariants('inputSize', sizeStyles, 'default');\n\nexport const inputHeight = 35;\nexport const smallInputHeight = 30;\n\nconst inputTopBottomBorderWidth = 2;\n\nconst inputElementHeight = inputHeight - inputTopBottomBorderWidth;\nconst smallInputElementHeight = smallInputHeight - inputTopBottomBorderWidth;\n\nexport const withInputSizeVariants = buildInputSizeStyles({\n\tsmall: css`\n\t\theight: ${smallInputElementHeight}px;\n\t\tmin-height: ${smallInputElementHeight}px;\n\t\tline-height: ${smallInputElementHeight}px;\n\t\t${typography('caption1')};\n\n\t\t&::placeholder {\n\t\t\t${typography('caption1')}\n\t\t}\n\n\t\t&::-moz-placeholder {\n\t\t\tline-height: ${smallInputElementHeight}px;\n\t\t}\n\t`,\n\tdefault: css`\n\t\theight: ${inputElementHeight}px;\n\t\tmin-height: ${inputElementHeight}px;\n\t\tline-height: ${inputElementHeight}px;\n\n\t\t&::-moz-placeholder {\n\t\t\tline-height: ${inputElementHeight}px;\n\t\t}\n\t`,\n});\n"],"names":[],"sourceRoot":""}