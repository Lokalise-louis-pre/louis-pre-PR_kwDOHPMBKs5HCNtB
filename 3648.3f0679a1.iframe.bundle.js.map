{"version":3,"file":"3648.3f0679a1.iframe.bundle.js","mappings":";;;;;;;;;AAgBA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;;;;AAWA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;;AAGA;AAuBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AC7EA;;;;AAIA;;;;AAMA;AACA;;;;AAIA;;;;AAIA;;;AAGA;;;;;;AAMA;;;;;AAKA;;;AAGA;;;;;;;;AAQA;AACA;;;;;;AAMA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;AAKA;;;;;;AAMA;;;;;;;;AAQA;;;AAGA;;;;;;AAMA;;;;;AAKA;AACA;;AAcA;;;AAGA;;;AA/JA;AAmKA;AACA;;AApKA;AAuKA;AACA;;AAIA;;;;;;AAQA;AChMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;;AAEA;AACA","sources":["webpack://@lokalise/louis/./src/components/Popover/styles.ts","webpack://@lokalise/louis/./src/components/Select/styles.ts","webpack://@lokalise/louis/./src/components/Tooltip/styles.ts"],"sourcesContent":["import type { Placement } from '@popperjs/core/lib/enums';\nimport type { HTMLAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography, variants, zIndex } from '../../utils/theme';\n\nconst bottom = css`\n\ttop: -5px;\n\n\t&::before {\n\t\tborder-left-width: 1px;\n\t\tborder-left-style: solid;\n\t\tborder-top-width: 1px;\n\t\tborder-top-style: solid;\n\t}\n`;\nconst top = css`\n\tbottom: -5px;\n\n\t&::before {\n\t\tborder-right-width: 1px;\n\t\tborder-right-style: solid;\n\t\tborder-bottom-width: 1px;\n\t\tborder-bottom-style: solid;\n\t}\n`;\nconst left = css`\n\tright: -5px;\n\n\t&::before {\n\t\tborder-right-width: 1px;\n\t\tborder-right-style: solid;\n\t\tborder-top-width: 1px;\n\t\tborder-top-style: solid;\n\t}\n`;\nconst right = css`\n\tleft: -5px;\n\n\t&::before {\n\t\tborder-left-width: 1px;\n\t\tborder-left-style: solid;\n\t\tborder-bottom-width: 1px;\n\t\tborder-bottom-style: solid;\n\t}\n`;\n\nexport const Arrow = styled.div<{ placement?: Placement }>`\n\tposition: absolute;\n\twidth: 8px;\n\theight: 8px;\n\tz-index: ${zIndex('hide')};\n\n\t&::before {\n\t\tposition: absolute;\n\t\twidth: 8px;\n\t\theight: 8px;\n\t\tz-index: ${zIndex('hide')};\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\ttransform: rotate(45deg);\n\t\tbackground-color: ${color('background.primary')};\n\t\tborder-color: ${color('border.primary')};\n\t}\n\n\t${variants(\n\t\t'placement',\n\t\t{\n\t\t\ttop,\n\t\t\tbottom,\n\t\t\tleft,\n\t\t\tright,\n\t\t\t'right-end': right,\n\t\t\t'right-start': right,\n\t\t\t'left-start': left,\n\t\t\t'auto-end': css``,\n\t\t\t'auto-start': css``,\n\t\t\tauto: css``,\n\t\t\t'bottom-end': bottom,\n\t\t\t'bottom-start': bottom,\n\t\t\t'left-end': left,\n\t\t\t'top-end': top,\n\t\t\t'top-start': top,\n\t\t},\n\t\t'auto',\n\t)}\n`;\n\nexport const Content = styled.div<HTMLAttributes<HTMLElement>>`\n\tpadding: 0;\n\tborder-radius: ${radius('md')};\n\tbackground-color: ${color('background.primary')};\n\tborder: 1px solid ${color('border.primary')};\n\tbox-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n\tz-index: ${zIndex('popover')};\n\tcolor: ${color('content.primary')};\n\tfont-family: ${fontFamily('default')};\n\t${typography('description')};\n`;\n","import type { Ref } from 'react';\nimport Select from 'react-select';\nimport type { GroupBase, OptionProps, SelectInstance, StylesConfig } from 'react-select';\n\nimport { CloseIcon } from '../../foundations/icons';\nimport type { Theme } from '../../foundations/themes';\nimport { styled } from '../../utils/styled';\nimport {\n\tinputHeight,\n\toneLineEllipsis,\n\twithInputContainerStyle,\n\twithInputDisabledStyle,\n\twithInputFieldStyle,\n} from '../../utils/styles';\nimport { color, fontFamily, radius, spacing, typography, zIndex } from '../../utils/theme';\nimport type { SelectProps } from './Select';\n\nexport const focusOutlineVisibilityClassName = 'LouisSelect-focus_outline_should_be_visible';\n\nexport const Item = styled.div`\n\t${oneLineEllipsis};\n\n\t// Padding is added, so MultiValueLabel Item text, could be seen in full size\n\tpadding: 1px;\n\tcolor: ${color('content.primary')};\n\tfont-size: 14px;\n\tline-height: 15px;\n\tmax-width: 200px;\n`;\n\nexport const StyledSelect = styled(Select)`\n\t${typography('caption1')};\n\twidth: 100%;\n\n\t.Select__option {\n\t\tfont-family: ${fontFamily('default')};\n\t}\n\n\t.Select__control {\n\t\t${withInputContainerStyle};\n\t\theight: unset;\n\t\tline-height: unset;\n\t\tmin-height: ${inputHeight}px;\n\t\tpadding: 0;\n\t}\n\t.Select__control--is-focused,\n    /* This second selector is required to make sure hover rule is not overriding focus */\n    .Select__control--is-focused:hover {\n\t\tborder-color: ${color('primary.500')};\n\t\toutline: none;\n\t\tbox-shadow: none;\n\t}\n\t.Select__control--is-disabled {\n\t\t${withInputDisabledStyle};\n\n\t\t.Select__placeholder {\n\t\t\tcolor: ${color('content.disabled')};\n\t\t}\n\n\t\t.Select__multi-value__label {\n\t\t\tpadding: 2.5px 8px;\n\t\t}\n\t}\n\t.Select__multi-value {\n\t\tbackground-color: ${color('background.secondary')};\n\t\tborder-radius: ${radius('md')};\n\t\tpadding: 1px;\n\t\tmargin: 0;\n\t}\n\n\t.Select__multi-value__remove svg {\n\t\tcolor: ${color('content.secondary')};\n\t\tfill: currentColor;\n\t\tcursor: pointer;\n\t}\n\t.Select__multi-value__remove:hover {\n\t\tbackground-color: transparent;\n\t\tsvg {\n\t\t\tbackground-color: transparent;\n\t\t\tcolor: ${color('interactive.primary.hover')};\n\t\t}\n\t}\n\t.Select__multi-value__remove svg {\n\t\twidth: 16px;\n\t\theight: 16px;\n\t}\n\t.Select__menu-notice--no-options {\n\t\tfont-family: ${fontFamily('default')};\n\t}\n\t.Select__indicator {\n\t\tpadding: 6px 8px;\n\t}\n\t&&& .Select__input {\n\t\tfont-size: 14px;\n\t\tline-height: 16px;\n\t\tcolor: ${color('content.primary')};\n\n\t\t&:focus {\n\t\t\toutline: none !important;\n\t\t}\n\t}\n\t.Select__indicators {\n\t\tcolor: ${color('border.primary')};\n\t}\n\t.Select__clear-indicator,\n\t.Select__dropdown-indicator,\n\t.Select__clear-indicator svg,\n\t.Select__dropdown-indicator svg {\n\t\tcursor: pointer;\n\t\tcolor: currentColor;\n\t\tfill: currentColor;\n\t}\n\t.Select__clear-indicator {\n\t\tpadding: 0px;\n\t\tmargin-right: 4px;\n\t\tfont-size: 16px;\n\t\theight: 16px;\n\t}\n\t.Select__dropdown-indicator {\n\t\tpadding: 0px 12px 0px 0px;\n\t\tfont-size: 16px;\n\t\theight: 16px;\n\t}\n\t&:not(.Select--is-disabled) {\n\t\t.Select__clear-indicator:hover {\n\t\t\tcolor: ${color('primary.500')};\n\t\t}\n\t\t&:hover,\n\t\t[data-dev-state='hover'] & {\n\t\t\t.Select__dropdown-indicator {\n\t\t\t\tcolor: ${color('primary.300')};\n\t\t\t}\n\t\t}\n\t\t[data-dev-state='focus'] & .Select__dropdown-indicator,\n\t\t.Select__control--menu-is-open .Select__dropdown-indicator {\n\t\t\ttransform: scaleY(-1);\n\t\t\tcolor: ${color('primary.500')};\n\t\t}\n\t}\n\t.Select__placeholder,\n\t.Select__single-value {\n\t\tfont-size: 14px;\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tcolor: ${color('content.secondary')};\n\t}\n\t.Select__single-value {\n\t\tcolor: ${color('content.primary')};\n\t}\n\t.Select__indicator-separator {\n\t\tdisplay: none;\n\t}\n\t.Select__value-container {\n\t\t${withInputFieldStyle};\n\n\t\tpadding: 4px 12px;\n\t}\n\t.Select__value-container--is-multi {\n\t\tgap: ${spacing(1)};\n\t\tpadding: ${spacing(1, 2)};\n\t}\n` as <\n\tAsync extends boolean,\n\tCreatable extends boolean,\n\tOptionType,\n\tIsMulti extends boolean = false,\n\tGroupType extends GroupBase<OptionType> = GroupBase<OptionType>,\n>(\n\tprops: SelectProps<Async, Creatable, OptionType, IsMulti, GroupType> & {\n\t\tref?: Ref<SelectInstance>;\n\t},\n) => ReturnType<typeof Select>;\n\nexport const Container = styled.div`\n\twidth: 100%;\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\tgrid-template-columns: minmax(50px, 1fr); /* This ensures Select doesn't overflow 100% */\n\n\t&.${focusOutlineVisibilityClassName} .Select__option--is-focused {\n\t\tbackground-color: ${color('primary.500')};\n\t\tcolor: ${color('content.white')};\n\t}\n\t&:not(.${focusOutlineVisibilityClassName}) .Select__option:hover {\n\t\tbackground-color: ${color('primary.500')};\n\t\tcolor: ${color('content.white')};\n\t}\n`;\n\nexport const StyledCloseIcon = styled(CloseIcon)`\n\tpointer-events: inherit;\n\n\t* {\n\t\tpointer-events: inherit;\n\t}\n`;\n\nconst extractThemeProps = <T extends { selectProps: object }>(props: T) => ({\n\t...props,\n\ttheme: 'lokaliseTheme' in props.selectProps ? props.selectProps.lokaliseTheme : undefined,\n});\n\n/**\n * First of all, this is the recommended way to apply custom styling to react-select component. But it's quite\n * inconvenient for use because it's really hard to use our styled-components theme here. Reason we can't do\n * everything using styled components is because, when rendering menu using portal (which we need to do sometimes)\n * the parent class is lost and styles are not applied to the menu. So the solution is to style menu/options using\n * recommended solution (below) and everything else using styled components.\n */\nexport const selectStyles = (\n\ttheme: Theme,\n): StylesConfig<\n\tOptionProps & {\n\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\t__isNew__: boolean;\n\t}\n> => ({\n\tinput: (base, props) => ({\n\t\t...base,\n\t\tmargin: 0,\n\t\tcolor: color('content.primary')(extractThemeProps(props)),\n\t}),\n\tmenu: (base, props) => ({\n\t\t...base,\n\t\tbackgroundColor: color('surface.primary')(extractThemeProps(props)),\n\t\tborder: `1px solid ${color('border.primary')(extractThemeProps(props))}`,\n\t\tboxShadow: '0 0 5px rgba(0, 0, 0, 0.2)',\n\t\tmargin: spacing(1, 0, 0)(extractThemeProps(props)),\n\t\tzIndex: zIndex('dropdown')(extractThemeProps(props)),\n\t}),\n\tnoOptionsMessage: (base, props) => ({\n\t\t...base,\n\t\t...typography('description')(extractThemeProps(props)),\n\t\tcolor: color('content.secondary')(extractThemeProps(props)),\n\t\ttextAlign: 'left',\n\t}),\n\toption: (base, props) => ({\n\t\t...base,\n\t\tfontSize: '14px',\n\t\tlineHeight: '16px',\n\t\tpadding: '8px 14px 9px',\n\t\tcolor: color('content.primary')(extractThemeProps(props)),\n\t\tcursor: 'pointer',\n\t\twhiteSpace: 'nowrap',\n\t\toverflow: 'hidden',\n\t\ttextOverflow: 'ellipsis',\n\t\twidth: '100%',\n\t\tminWidth: '100%',\n\n\t\t':active': {\n\t\t\tbackground: color('primary.500')(extractThemeProps(props)),\n\t\t\tcolor: color('content.white')(extractThemeProps(props)),\n\t\t},\n\t\t// eslint-disable-next-line no-underscore-dangle\n\t\t...(props.data.__isNew__ ? { color: color('interactive.primary.idle')(extractThemeProps(props)) } : {}),\n\t\t...(props.isSelected\n\t\t\t? {\n\t\t\t\t\tbackground: 'none',\n\t\t\t\t\tcolor: color('content.primary')(extractThemeProps(props)),\n\t\t\t\t\t/**\n\t\t\t\t\t * For the selected option we originally were setting `display: flex` but combination of flex + text-overflow\n\t\t\t\t\t * was not working correctly. Instead, for the selected option, we instead have the icon to be positioned\n\t\t\t\t\t * absolutely and shift it left while simultaneously adding same amount of padding left to the selected option.\n\t\t\t\t\t *\n\t\t\t\t\t * 16px – icon width, 14px – original padding (above), 1 spacing – gap\n\t\t\t\t\t */\n\t\t\t\t\tpaddingLeft: `calc(16px + 14px + ${spacing(1)(extractThemeProps(props))})`,\n\t\t\t\t\t'&::before': {\n\t\t\t\t\t\twidth: 16,\n\t\t\t\t\t\theight: 16,\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t// 16px icon width + 1 spacing\n\t\t\t\t\t\tmarginLeft: `calc(-16px - ${spacing(1)(extractThemeProps(props))})`,\n\t\t\t\t\t\tcontent: '\"\"',\n\t\t\t\t\t\tflex: '0 0 auto',\n\t\t\t\t\t\tverticalAlign: 'middle',\n\t\t\t\t\t\tbackgroundSize: '16px 16px',\n\t\t\t\t\t\tbackgroundRepeat: 'no-repeat',\n\t\t\t\t\t\tbackgroundPosition: 'center',\n\t\t\t\t\t\tbackgroundImage: `url(\"data:image/svg+xml,%3Csvg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M6.64372 10.1336L3.58684 7.07669L2.65918 8.01319L6.65255 12.0066L12.9872 5.65427L12.0507 4.71777L6.64372 10.1336Z' fill='${encodeURIComponent(\n\t\t\t\t\t\t\tcolor('content.primary')(extractThemeProps(props)),\n\t\t\t\t\t\t)}'/%3E%3C/svg%3E%0A\")`,\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: undefined),\n\t\t...(props.isFocused\n\t\t\t? {\n\t\t\t\t\tbackground: 'inherit',\n\t\t\t\t\tcolor: 'inherit',\n\t\t\t  }\n\t\t\t: undefined),\n\t}),\n\t// No access to props inside menuPortal\n\tmenuPortal: (base) => ({ ...base, zIndex: theme.zIndices.dropdownInPortal }),\n\tmenuList: (base, props) => ({ ...base, maxHeight: props.selectProps.maxMenuHeight }),\n\tvalueContainer: (base) => ({ ...base, overflow: 'initial' }),\n});\n","import { styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography, zIndex } from '../../utils/theme';\nimport { PopoverArrow as BaseArrow, PopoverContent as BaseContent } from '../Popover';\n\nexport const Content = styled(BaseContent)`\n\tfont: ${fontFamily('default')};\n\t${typography('caption2')};\n\tbackground-color: ${color('content.black')};\n\tcolor: ${color('content.white')};\n\tborder-radius: ${radius('md')};\n\tpadding: 3px 8px 4px;\n\tborder-color: ${color('content.black')};\n\tz-index: ${zIndex('tooltip')};\n`;\n\nexport const Arrow = styled(BaseArrow)`\n\t&:before {\n\t\tbackground-color: ${color('content.black')};\n\t\tborder-color: ${color('content.black')};\n\t}\n`;\n"],"names":[],"sourceRoot":""}